{"meta":{"title":"黑暗森林","subtitle":"勇气是唯一的武器，坚韧是唯一的铠甲","description":"思辨","author":"BlackForest1990","url":"https://blackforest1990.github.io","root":"/"},"pages":[{"title":"tags","date":"2023-03-14T08:49:03.000Z","updated":"2023-03-14T08:59:35.881Z","comments":true,"path":"tags/index.html","permalink":"https://blackforest1990.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2023-03-14T09:15:12.000Z","updated":"2023-03-14T09:15:42.088Z","comments":true,"path":"categories/index.html","permalink":"https://blackforest1990.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"历史中的魅力发言","slug":"历史中的魅力发言","date":"2024-07-18T02:02:39.000Z","updated":"2024-07-18T02:40:24.413Z","comments":true,"path":"2024/07/18/历史中的魅力发言/","link":"","permalink":"https://blackforest1990.github.io/2024/07/18/%E5%8E%86%E5%8F%B2%E4%B8%AD%E7%9A%84%E9%AD%85%E5%8A%9B%E5%8F%91%E8%A8%80/","excerpt":"","text":"秦 国家军国主义，丈量全国土地，登记造册全国资源，对于人民压榨太过，没有很好地消化六国残余势力 项羽 军神级别，勇略为第一将，而无战略，以自己的喜怒而支配政治（烧咸阳宫，杀秦降将，失关中之心） 刘邦 49岁斩白蛇，取关中，军霸上，完成蜕变（成大事要有第一等的克制），用合适的人，合理的分糕，对于制度的探索要摸着石头过河，黑猫白猫抓住老鼠就是好猫。 “吾以布衣提三尺剑取天下，此非天命乎？命乃在天，虽扁鹊何益！” 韩信 长于军事战略，能够快速判断局势，趁关中立足未稳而定关中，10个月平魏，定赵，灭齐，降燕，充分收集情报，实实虚虚，以比之长攻彼之短，但是在身居高位的时候没有三分天下，终究是国士无双，而没有意识到政治斗争的残酷性。 吕后 用黄老之道治国，维持小政府，在没有大动乱（战争和大灾），能够很好地与民休息，不与军功集团争相权，保持政治平衡，对于权力克制不够，对于政敌迫害过大，导致后面反弹太大。 汉文帝刘恒 宽厚而福报深厚，在政治和权力面前永远是谨慎的，推恩令逐渐蚕食诸侯的权力，继续用黄老之道治国。 武帝 为千古一帝，权术的顶峰，文化上独尊儒术，儒学也彻底倒向统治者，创造了很多压榨人民的手段，官方统一货币，国有企业出现（盐，铁），人民被无止境的盘剥，允许买官，通过压榨天下，拥有了庞大的经费，发出了犯强汉者虽远必诛的强音，然后在晚年通过权术，让太子自杀，发布罪己诏，让政策软着陆，定下了昭宣的与民休息政策，选择了接班人霍光，让自己的政策能够执行。 宣帝 民间长大，了解民间疾苦，不搞政治清算，对于霍光的政策能够延续，“汉家自有制度，本以霸王道杂之。奈何纯任德教，用周政乎！”是对于汉朝制度最好的注解，然而儒家没有被关进笼子里，太学制度让儒家成为了大祸。 王莽 乱天下者，儒家理想主义者，糟糕的经济政策和豪强政策，加上糟糕的天气，一世而终。 光武 安定天下，豪族投票出的代理人，重新确立儒学的地位，以夷制夷的优秀策略。 曹操 浪漫的诗人和强大的军事家，优秀的政治家，年轻时候想成为大汉的一名优秀官吏，后来讨伐董卓后认清现实，涿郡老家的武人集团起兵，后来得到颍川荀彧的文人集团加盟，在于袁绍的官渡之战中，最后亲自带领骑兵攻打乌巢。 平定北方，统一了全国80%人口的地方，但是屠戮徐州，迁徙百姓，对于曾经得王佐之才，最后诛杀了荀彧。 李世民 7世纪地表最强，少年英雄，布局深远，军略上能够洞悉战场的局势，以最小的成本取得最大的战果，政治上以自我的克制造成了清明的政治环境，对于北疆的策略非常高明，作为天可汗，能够集合草原部落去对付不听话的野心家，种种布局，以最小的代价确定了北疆的和平，唯一比较诟病的是对于继承人的策略。 半瓶子水时最晃荡，一瓶子水时都没声音，之所以“惟大英雄能本色”，是因为像炫耀、忐忑、不自信等等的关卡他都已经过去了，他该啥样就啥样，他从不需要来证明自己什么。 1、永远亲临现场调研，具体问题具体分析。 2、永远注意士气，永远跟同志们讲明白革命因何成功的理论依据。 3、永远直面困难，永远解决问题，永远亲自带队攻坚最难的任务。 4、战争是政治的延续，打仗永远算账，不是单纯地为了打仗而打仗，永远全局一盘棋。 武则天 唐朝衰弱由武氏开始，任用酷吏，破坏政治清明，好大喜功，军事上昏招频出，从而使府兵制衰弱下去，为藩镇割据打好基础。","categories":[{"name":"历史","slug":"历史","permalink":"https://blackforest1990.github.io/categories/%E5%8E%86%E5%8F%B2/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://blackforest1990.github.io/tags/%E6%9D%82%E8%B0%88/"}]},{"title":"如何让英语成为你的工作语言","slug":"如何让英语成为你的工作语言","date":"2024-01-18T02:37:02.000Z","updated":"2024-01-19T02:26:34.766Z","comments":true,"path":"2024/01/18/如何让英语成为你的工作语言/","link":"","permalink":"https://blackforest1990.github.io/2024/01/18/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%8B%B1%E8%AF%AD%E6%88%90%E4%B8%BA%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%AF%AD%E8%A8%80/","excerpt":"","text":"​ 很多时候，使用英文去沟通能成为一个不错的优势，因为国内的内卷和资方过于强势，去跨国公司和外企现在看来是一个不错的选择，如何组织会议，沟通客户和本地员工，是一门很重要的课程。本人做一个在跨国公司7年的老员工，去过很多国家，做过一些英文交流，水平也不高，在这里提出一些自己的想法，共同提高，共同进步。 看美剧不如聊两句 ​ 很多时候从应试教育出来的人，很难把自己变成做应用的人，也即分数思维如何向解决问题思维转变呢，我记得我第一次出差时，去的国家是阿曼的马斯喀特，是阿曼电信聊Uportal的业务，当时准备了很久，说的时候头脑一篇空白，两个服务的兄弟很好，帮助了我很多，后来我就经常跟本地员工去聊业务，最后渐渐英文也流利了起来。 后来我想一想为什么这样的方式能练好英文，第一，固定topic， 第二，你在技术上有优势，心理上有把握， 第三，内容你熟悉，只是转换成英文去说，我认为如果能够采取这样的方式去练习英文，可能进步速度会快一点。 workshop如何hold住全场 ​ 工作中，很多时候你需要去讲你写的slide，作为一名产品经理，给客户提出你的解决方案是最重要的，如何去做呢，首先材料不要求多，一般正式的proposal要求最多20页，按照2min一页的速度去讲解，材料不要求面面俱到，但写在上面的需要正确和能够合理解释。跟客户私下传递也建议打印一份一页key point，写出方案的优劣点。下图为客户与总部专家workshop中交流情况。 ​ 行业上的词汇其实你应该要牢记掌握，如果你技术上的词汇说的不够地道，会降低会议的演示效果，比如我作为一个通信产品经理，以下词汇其实是经常会见到的： 大部分电信的解决方案胶片都有八股文可以炒，先阐述客户集团和子网的数字化战略，然后分析现网情况，再根据现网情况提出菊厂的方案，再阐述菊厂的战略和投入，在说明应用case，如果能做到这样简明清晰，那么就是一篇很好地方案八股文了：） 客户关系呢？ ​ 客户关系是第一生产力，良好的客户关系能够帮助你在商业上获取信息，影响客户的决策链，如何跟客户成为朋友呢？ ​ 首先你首先要在工作上支持你的客户，如果你活干的不好，你大概跟客户成为不了朋友，如果犯了大错，可能还会使客户倒向友商，所以优秀的工作是一切的前提，然后可以请客户吃吃饭，可以在吃饭的时候谈一些工作上的topic，了解一下客户的兴趣爱好，后面，可以进一步跟客户去打高尔夫啊，网球之类的，注意，每一次跟客户交往，你都要准备几个话题，几个无关痛痒的和一些工作上你需要传递的，这样客户跟你在一起既轻松又可以实现突破。 ​ 最后，如果客户邀请你去他家了，这是一个重大的里程碑，这代表你的客户关系达到亲密的等级，在客户家里要注意客户的宗教信仰，人种，文化背景，教育背景，需要得体而同时活泼，这个时候才是客户关系的第一步，所以良好的英文沟通，让客户信任你跟你聊得来，是非常重要滴。 商务谈判如何做 有一本书叫逆势谈判说的很好，谈判不是辩论，不需要巧舌如簧，谈判是寻求合作，沟通能力很重要，所以商务谈判中的英文，需要精准，而不需要很流利，适当留白让大家去思考反而更有助益。 谈判是冲突各方通过设定立场、提出建议、做出取舍,交换价值,并最终达成共识的过程。谈判更多关注的是如何能实现自己的目标，谈判者并不会纠结于谁对谁错。所以在谈判中，关注的不应该是人，而是在于条款，如何通过博弈或者协商规划出一条对于双方有利的条款，非常重要，所以商务谈判中的英语最好做到精准，职业，非情绪化。 总结 最重要的要去说 提前准备topic 客户关系要一步一步做 商务谈判务求精准","categories":[{"name":"经验总结","slug":"经验总结","permalink":"https://blackforest1990.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"工作语言","slug":"工作语言","permalink":"https://blackforest1990.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AF%AD%E8%A8%80/"}]},{"title":"如何建立销售铁军","slug":"如何建立一所销售铁军","date":"2024-01-18T02:36:40.000Z","updated":"2024-01-23T14:55:34.769Z","comments":true,"path":"2024/01/18/如何建立一所销售铁军/","link":"","permalink":"https://blackforest1990.github.io/2024/01/18/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E4%B8%80%E6%89%80%E9%94%80%E5%94%AE%E9%93%81%E5%86%9B/","excerpt":"","text":"本人在华为做过3年的解决方案产品经理，在一家小型环保公司做过市场总监，即做过销售也做过销售leader，如何通过管理手段，锤炼出能打胜仗的铁军呢。 招合适的人 ​ 首先明确你的项目定位，ToB还是ToC的，是IT行业还是传统行业？人才梯度是怎样的，高级销售员是否需要自带资源？如何验证这些资源是否可靠？如果做一个IT行业的ToB的项目，恐怕他的技术能力和对生态的理解是很重要的，如果是做一个环保行业的ToG项目，恐怕他的政策理解和资源能力是很重要的。对于一个销售员如何判断他是否具备自主销售能力？恐怕重点要考察的是他对某一领域的拓展路径，以及遇到种种困难的处理方式。 如下是一些常见的评估销售员的要素： 销售技能： 包括沟通技巧、谈判技能、客户关系管理等方面的能力。 产品知识： 销售人员需要深入了解所销售的产品或服务，以便能够有效地向客户传达价值。 目标达成能力： 评估销售人员是否能够实现销售目标，并在规定时间内完成销售任务。 客户服务： 考察销售人员对客户需求的理解和满足客户期望的能力。 团队合作： 对于团队中的销售人员，评估他们在团队中的合作和协作能力。 销售策略： 能否制定有效的销售策略，并根据市场需求做出调整。 问题解决： 销售人员是否能够迅速而有效地解决客户和销售过程中出现的问题。 市场洞察： 是否具备对市场趋势和竞争情况的敏感性。 这些要素是否对于你的项目都重要？恐怕评估的时候要通过权重的方式去考虑。 制度比拍脑袋重要 ​ 好的销售队伍就是一只好的部队，令行禁止，能打硬仗，赏罚分明，这些都取决于制度建设，可以分为项目维度和客户群维度分开考核，比如菊厂的LTC，立项以后，卷积相关人员，基于项目角度去管理一只队伍，基于项目定期召开项目分析会，同时团队成员的项目奖金包也跟项目贡献相符。基于大客户群的管理，双方有稳固的关系，这个时候就可以成立销售团队去维护这个客户群，梳理出需要突破的关键客户，做团队运作，奖金包也跟这个客户群的销售收入与回款挂钩，格局突破与销售增长还可以定向加倍激励，总之，对于销售制度，激励是一切的基础。 “Leads to Cash”（潜在客户到现金）通常是指从潜在客户（Leads）的阶段开始，通过销售和业务过程，最终将这些潜在客户转化为实际的销售收入或现金。这涉及整个销售和营销生命周期的过程。 以下是“Leads to Cash”过程的一般步骤： 潜在客户（Leads）生成： 通过各种营销活动（如广告、社交媒体、市场活动等），公司吸引并获取潜在客户的信息。 潜在客户资格验证： 对潜在客户的信息进行验证和资格审查，以确保他们是有兴趣的、符合目标市场的潜在客户。 销售线索转化： 将合格的潜在客户转化为销售线索，开始进行个性化的销售活动。 销售活动和谈判： 销售团队与潜在客户互动，进行谈判、演示产品或服务，并解答他们的疑虑。 销售订单生成： 当潜在客户决定购买时，生成销售订单，明确交易的条款和条件。 交付产品或服务： 提供所销售的产品或服务，确保客户满意。 发票和付款： 发送发票，并确保客户按照协议的条件进行支付。 现金收款： 收到客户的支付，并将其转化为公司的现金收入。 整个过程涉及多个团队和部门，包括市场营销、销售、客户服务和财务等。通过有效的“Leads to Cash”流程，企业可以最大程度地优化他们的销售生命周期，提高客户满意度，并实现更好的财务绩效。 ​ 同样，惩罚措施重要吗，很重要，但是不必写入制度，制度上的制订要有灰度，不能轻易去惩罚员工，可以基于事情去批评员工，但是惩罚会使员工流失，不建议。 ​ 通过制度去流动和评判员工，而不是通过领导好恶，销售工作中，业绩是最重要的，同时，项目分析会和总结也需要纳入整体系统评价中，保证销售数据纳入系统。 执行力胜过一切，能抗住强大压力吗？ ​ 很多时候，销售是执行力的艺术，市场是瞬息万变的，强大的执行力和百折不挠的勇气让这支军队更强大，这也是评价销售人员能否晋升的评价因素，一个销售，水平低不怕，但是主管的要求执行不下去，恐怕也是要被淘汰的。回想我的职业生涯，如果能在非洲扛过强大的压力，努力提升自己，现在人生的境况会不同吗？ ​ 对于一线的客户关系，我感觉遗憾还是蛮大的，没有能跟客户在私下里有交往，Rohitash和Dogals我认为我当时真的是有机会发展成我自己的客户，他们对我的印象都挺好，但是当时我并没有主动去做客户关系，这主要还是执行力不够。在一线，我也没有真正去面对压力，总是逃避，造成了压力越来越大，最终崩溃，逃跑，这都是人生的血泪史。汉高于荥阳成皋，光武于昆阳河北，魏武于濮阳官渡，直面压力，才能获得最宝贵的东西。 总结 强大的销售铁军三要素： 合适的人 好的制度 优秀的执行力","categories":[{"name":"经验总结","slug":"经验总结","permalink":"https://blackforest1990.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"销售管理","slug":"销售管理","permalink":"https://blackforest1990.github.io/tags/%E9%94%80%E5%94%AE%E7%AE%A1%E7%90%86/"}]},{"title":"电信运营商产品经理复盘","slug":"电信运营商产品经理复盘","date":"2024-01-18T02:36:22.000Z","updated":"2024-01-18T06:07:38.928Z","comments":true,"path":"2024/01/18/电信运营商产品经理复盘/","link":"","permalink":"https://blackforest1990.github.io/2024/01/18/%E7%94%B5%E4%BF%A1%E8%BF%90%E8%90%A5%E5%95%86%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%A4%8D%E7%9B%98/","excerpt":"","text":"作为一名菊厂曾经的运营商一线产品经理，对于电信运营商的采购流程有一定了解，做为一个高可靠性，重资产项目，如何推进项目，如何立项，投标，如何影响客户决策链，笔者根据自己的项目经验，现做如下总结归纳。 电信运营商组织架构 电信运营商，即网络架设商，比如中国的移动，联通，电信就是此类运营商。根据传输方式，分为固定运营商和移动运营商。 运营商多采用集团-&gt;子网模式经营，因为运营商多在不同国家运营，所以会在每个国家建立子网子公司，由集团统一管理，下图为中国电信的集团与子网。 笔者曾经深度参与过MTN的项目，子网为乌干达，他的集团和子网架构是这样的。 子网话语权是根据收入来的，比如南非子网，他的CEO的权力就很大，集团也不能过多干涉，但是乌干达这个收入少的子网，很多战略上就不能跟基团相悖，基团会在每年Q1确定子网的预算，由子网做预算分析，确定下一年的Capex和Opex，200万美金以内的扩容项目可以在子网执行，搬迁和新建项目都要向基团汇报。 项目组织架构匹配 电信运营商菊厂主要是采用铁三角（AR+SR+FR）管理客户群的，AR为客户关系，SR为解决方案，FR为服务，主要采取层级一一对应。 子网： CEO/CTO -&gt; 系统部部长， CTO/网络Director -&gt; 客户经理和， 工程Director/CTO -&gt; PM/PD/TD, 网络Director -&gt;产品经理 集团也是同样，大T系统部需要按照层级一一对应。 客户网络Director客户画像 Dogals： 本地黑人，穆斯林，英国曼彻斯特大学硕士毕业，在MTN工作12年，为网络规划部 Director，精通核心网 IPcore IPran，团队8人（3人wireless + 3人固定 +2 人核心网），性格上比较绅士，基本上不会投诉，偏向菊厂，关系较好，能够正常出入客户办公室，可以周末去客户家里聚餐，邀请客户打高尔夫。 项目运作 菊厂对于电信项目有传统的三板斧，主要是指邀请客户参观公司总部、邀请客户参加峰会和展会，并与华为的高层形成互动，建立样板点并邀请客户参观，对于Uganda MTN搬迁现网CS，华为的电信云化解决方案，符合MTN集团CTO的数字化转型战略，同时Uganda MTN为经营比较好的子网，客户不吝于技术上的投入，本项目为经典的技术牵引商业。乌干达子网的经营数据如下： “EBITDA” 是 “Earnings Before Interest, Taxes, Depreciation, and Amortization” 的缩写，即利息、税项、折旧和摊销前利润。EBITDA是一种财务指标，用于衡量公司的经营绩效和盈利能力。 该项目具体运作方法如下： 项目 描述 概述 乌干达MTN语音网络设备老旧，已经面临转型，同时语音收入占总体收入一半以上，客户同样要求业务继承性以及交付的稳定性 战略 集团的数字化转型战略为不可逆的行为，现网EOL的设备都会走云化路线，菊厂内部立项，形成代表处-地区部-机关人员构成，确定职责，汇报方式，定期开项目分析会。 邀请客户参观公司总部 邀请子网客户CTO回国，通过跟总部研发和交付人员的密集交流，CTO打消的疑虑，认可了传统电信设备走云化转型的价值，同时对于稳定搬迁核心语音网络有了技术信心 引导发标 子网CTO向南非集团CTO汇报，发标搬迁现网CS网络，通过技术屏蔽了N和Z厂家 方案价值 现网PS云平台扩容，核心网一朵云，管理方便，考虑未来Uganda语音仍在增长，会节省Opex和Capex 标后澄清 跟子网CTO提出扩容割接方案，通过现网PS扩容，多采购一批硬件，用于CS，基于PS的PO启动CS交付，割接了10%的流量上来，现网运行稳定 商务谈判 子网正式中标，集团汇报过会，商务谈判中，对于搬迁部分给与折扣，后续扩容没有影响，考虑硬件部分已经在PS PO中执行完毕，主要优惠部分为客户现网用户license，所以本项目商务较为优秀 客户决策链如下 子网CTO -&gt; 集团CTO -&gt; 子网制作标书-&gt; 集团过会 -&gt; 子网发标 -&gt; 中标 -&gt; 商务谈判 -&gt; 子网采购流程 -&gt; PO 总结 战略永远是最重要的 客户的经营永远是第一驱动力 永远向着议标去努力，如果不行，合同条款是生命线","categories":[{"name":"经验总结","slug":"经验总结","permalink":"https://blackforest1990.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"电信运营商","slug":"电信运营商","permalink":"https://blackforest1990.github.io/tags/%E7%94%B5%E4%BF%A1%E8%BF%90%E8%90%A5%E5%95%86/"}]},{"title":"政府的生意怎么做","slug":"政府的生意怎么做","date":"2024-01-18T02:36:03.000Z","updated":"2024-01-22T12:01:28.434Z","comments":true,"path":"2024/01/18/政府的生意怎么做/","link":"","permalink":"https://blackforest1990.github.io/2024/01/18/%E6%94%BF%E5%BA%9C%E7%9A%84%E7%94%9F%E6%84%8F%E6%80%8E%E4%B9%88%E5%81%9A/","excerpt":"","text":"​ 很多时候，政府的生意都很难做，冗长的付款流程和期限，复杂的客户关系，回款风险较大，笔者在从事ToG的环保公司工作了一年，对于ToG领域有一定的了解，现在对于这个领域做出总结，希望能够帮到大家。 政府组织架构 ​ 首先确定项目的类型，比如笔者接触了一年的污水处理项目，国内污水处理项目基本分为三种模式，政府自投自建自营，收益为公共事业基金收益；特许经营模式，社会资本购买污水处理项目的特许经营权并获得污水处理厂的物权，特许经营期满移交回政府实施机构或政府指定机构；PPP模式，其中较为典型的模式是社会资本建设污水处理工程，并实施运营，期间获得使用者付费，收回建设投资并获取收收益。 ​ 根据项目性质，确定政府组织结构如下： 中央层级： 国家发展和改革委员会（NDRC，国家发改委）： 负责经济和社会发展规划，可能涉及项目的规划和资金安排。 生态环境部（原环境保护部）： 主管全国范围内的环境保护工作，负责污水治理政策的制定和实施。 水利部： 负责水资源管理，可能与污水处理项目中的水质、水量等相关事务有关。 住房和城乡建设部： 在城市污水治理项目中可能参与城市基础设施和规划。 地方层级： 省级生态环境厅/局： 在省级范围内负责环境保护和污水治理工作。 地市级生态环境局： 在地市级别进行具体的环境监管和治理工作，包括污水处理。 水务局： 在地方层级，水务局可能负责水资源管理和水环境保护，与污水处理相关。 城市规划和建设部门： 负责城市基础设施规划和建设，包括城市污水处理设施的规划和建设。 相关协会和研究机构： 中国城市水务协会： 作为一个行业协会，可能参与行业内的交流、合作和标准制定。 中国环境科学研究院等研究机构： 参与环境科学研究，为政府决策提供科学依据。 以上是主要的污水处理方面的组织架构，各级政府机构在负责本级别事务的同时，也执行中央政府的政策和指令。协调各级政府和相关机构之间的合作至关重要，以确保污水治理工作的高效实施。请注意，政府组织架构可能会根据时代和政策的变化而调整。 政府采购流程 政府采购是指政府机关、事业单位、公有制企事业单位以及其他使用财政资金的组织，为了履行职责，通过市场行为获取特定商品和服务的过程。 江苏省财政厅政府采购处日前发布了6张操作流程图，包括公开招标操作流程图、竞争性谈判操作流程图、单一来源操作流程图、邀请招标操作流程图、询价操作流程图、竞争性磋商操作流程图。 这几种招标方式有一些关键区别，主要体现在供应商的选择方式、投标过程以及采购合同的达成方式上。以下是它们的主要区别： 公开招标： 供应商选择： 所有合格的供应商都可以参与，公开竞争。 投标过程： 公开发布招标公告，潜在供应商可以获取招标文件并提交投标文件。 合同达成： 通过公开评标，中标供应商与采购方签订正式合同。 竞争性谈判： 供应商选择： 需要事先确定一些资格供应商，然后邀请其参与谈判。 投标过程： 邀请特定的供应商参与竞争性谈判，谈判过程中商议合同条款。 合同达成： 最终确定中标供应商，签订正式合同。 单一来源： 供应商选择： 仅选择一个供应商，通常因为特殊原因，如技术专业性、专有权等。 投标过程： 直接与选定的供应商进行谈判和洽谈。 合同达成： 签订正式合同。 邀请招标： 供应商选择： 从已有供应商资格名单中邀请特定的供应商参与招标。 投标过程： 邀请特定供应商参与，发放邀请函，供应商提交投标文件。 合同达成： 通过评审确定中标供应商，签订正式合同。 询价： 供应商选择： 向多个供应商发出询价函，通常是小额采购。 投标过程： 供应商提交报价，采购方评审并选择最合适的报价。 合同达成： 签订正式合同。 竞争性磋商： 供应商选择： 事先确定一些资格供应商，然后邀请其参与磋商。 投标过程： 邀请特定的供应商参与，进行竞争性磋商，商议合同条款。 合同达成： 最终确定中标供应商，签订正式合同。 这些方式的选择通常由采购项目的性质、法规规定以及采购方的需求决定。 客户关系 根据做了一年政府部门的项目，我对于B2G的项目有一定的了解，基本逻辑也是按照B2B的方式去做，建立线索，验证线索，线索向机会点转化，客户群管理，投标管理，商务管理，合同管理，与2B最大的差别，2G的项目要求更稳定一些，周期也比2C的项目长，所以项目的稳定性更重要一些。 相比直接硬怼耗精力在“最终客户”上，不如先摸清楚外围生意网络，找到靠谱“中间人”，对于政府资源，总是周围有一圈人的，比如揭阳污水项目，林总在项目中起到的作用就非常大，但是这种模式，基本上销售毛利率不会很高，因为对于你来说始终产生不了关键客户关系。所以总体来说，ToG项目很多时候是在做经销商管理。 对于经销商要建立清晰的合作协议： 制定明确的合作协议，确保协议中包含了双方的权利和责任，包括价格政策、销售目标、付款条款等。合作协议应该能够阐明各方的期望。一旦建立关系，要充分放权，充分沟通，同时制订合理的激励计划和技术支持，形成良性循环。 在建立好完善的经销模式后，商业模式有了正反馈，再考虑去做2G的大项目，即EPC模式：EPC（Engineering Procurement Construction），是指承包方受业主委托，按照合同约定对工程建设项目的设计、采购、施工等实行全过程或若干阶段的总承包。并对其所承包工程的质量、安全、费用和进度进行负责。对于这种模式，交付与付款周期都是大挑战，虽然项目规模大，但是收尾困难，项目初期需要对于招标方的资质，付款能力，领导情况做深入评估，人员高度卷积，客户关系深度管理，该项目虽然盈利水平不高，但是对于公司在行业内的口碑都有正向作用，但是如果不能合理评估项目困难，盲目卷入，可能会造成巨大的灾难性亏损。 ToG客户关系分析 TOG政务市场面对的用户主要是是公务员、事业编人员，这个人群大多是高知人群，从学历、社会地位、经济收入、家庭背景都占有相当的优势。由于在政府工作，习惯政令行事、层级森严、派系林立的环境，工作任务固定、重复性高、失误率低的要求。用户主要可以分为以下4类： 决策人员：树立标杆、体现政绩； 管理人员：做好监管、规避风险； 业务人员：流程规范、操作流畅； 广大群众：减少环节、方便快捷； TOG产品的利益相关方通常比较多，且各自需求不一致。对于乙方公司来讲，决策者的需求当然是最重要的，为了更好表达各干系人的需求，通过下面用户心理需求模型来说明，越往上的需求有优先级别越高。 1. 可靠性 可靠性是政务市场的基本要求，包括：项目能够顺利完成；可靠运维服务；数据安全。另外，政府客户对数据安全可靠特别重视，通常在政务内网，政务外网部署，保障数据安全。如果考虑上云部署，要做好保障数据安全的解决方案。 2. 风险控制 政府工作会对工作进行溯源问责，例如办理过程的记录，系统的操作记录，在发生争议或问题的时候，能够快速定位原因。因此，在产品设计过程要关注风险控制。 3. 体现政绩 驱动决策者来做某个项目，都是基于政策和考评要求。发达地区政府追求标杆项目，其他地区追求地方特色，因此定制化需求就比较多。政府之间经常会有考察学习的活动，经常通过可视化大屏展示政绩成果。大屏展示体现了地方特色，很难做到标准化。 4. 效率提升 效能办会对人员每月进行工作量统计，绩效考核，这个时候如何提升效率就显得尤为重要。 5. 更好的体验 所有的角色都需要更好的体验，但使用系统最多的业务人员和人民群众对体验要求最甚。 不像TOC产品那样，基于收集大量用户数据建立画像，TOG产品更多通过行业分析、客户调研来构建客户画像。通过构建客户画像，有助于精准营销，针对性行业客户特点开展售前营销，也有助于项目需求调研前期的背景分析。 TOG的客户，还具有以下特点： 1. 用户非客户 TOG的客户和某类用户可能之间只存在服务与被服务，监管与被监管的关系。 2. 客户往往是行业专家 客户通常是某个政府行业领域的专家，比如城管局，药监局，交管局等等。这就需要我们去拜访客户之前，对行业有着充分的理解，了解产品需要解决该行业什么痛点，才能够有机会取得客户的信任。 3. 潜在客户难以触达，特别是决策者 因为决策者往往是领导，而除非有特别的关系，或者是客户主动找到我们，领导往往不太容易见到。因此这就更需要我们在关键节点之前，做好充分准备。 4. 客户决策流程较长 政府端通常有一个决策流程，我们能够接触到的，一般是执行者，而执行者往往需要向领导汇报，如果关系到位，可以在关键节点见到决策者，这个时候就需要把握机会，汇报关键内容，争取决策者的信任。预算也是非常关键的因素，弄清楚政府部门在这方面的预算，是至关重要的，预算直接关系着决策的结果。 通过客户画像提供了客户特征信息，了解项目背景。还要了解用户建设该项目的动机和背后存在的痛点的关键环节，基于不同的动机，客户对系统的要求也是很大差别的。 政务用户需求通常是由上而下，上级领导掌握着全部的需求决策权。通过用户心理需求模型，在调研过程要抓住主要核心人物（决策人员）的需求，直接决定着需求调研的成功与否。想尽办法获取最有用的信息，利用现场访谈、观察、查阅资料等方法，可以采用直接了解和曲线了解需求。","categories":[{"name":"经验总结","slug":"经验总结","permalink":"https://blackforest1990.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"与虎谋皮","slug":"与虎谋皮","permalink":"https://blackforest1990.github.io/tags/%E4%B8%8E%E8%99%8E%E8%B0%8B%E7%9A%AE/"}]},{"title":"云计算架构设计总结","slug":"云计算架构设计","date":"2024-01-18T02:35:45.000Z","updated":"2024-03-21T03:05:01.701Z","comments":true,"path":"2024/01/18/云计算架构设计/","link":"","permalink":"https://blackforest1990.github.io/2024/01/18/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"什么是云计算？美国国家标准与技术协会（NIST）对此有这样一个权威和经典的定义： “所谓云计算，就是这样一种模式，该模式允许用户通过无所不在的、便捷的、按需获得的网络接入到一个可动态配置的共享计算资源池（其中包括了网络设备、服务器、存储、应用以及业务），并且以最小的管理代价或者业务提供者交互复杂度即可实现这些可配置计算资源的快速发放与发布。” 云计算的核心可以用五大基本特征、三种服务模式以及四类部署模式来概括。五大基本特征是：按需获得的自助服务，广泛的网络接入、资源池化、快捷的弹性伸缩以及可计量的服务。三种服务模式为：云基础设施即服务（IaaS），云平台即服务（PaaS），以及云软件即服务（SaaS）。四类部署模式可以划分为：专有云（私有云）、行业云、公有云，以及混合云。 云计算把一个固定CAPEX投入的IT项目变成一个PAYU 的OPEX项目, 因为成本和方案的优势，云计算伴随着企业数字化转型，被越来越看重，如何去做企业云化的架构设计，被讨论的越来越频繁，架构不应该只是考虑技术上的可行性，同时要考虑能否快速迁移，能否进行人员培训提高企业的DevOps能力，能否随着数字化转型成功给企业带来正向收益，这些要素同样需要纳入架构的设计中。无论IT架构如何螺旋式演进，客户价值和驱动力都体现在： 更低的TCO； 更高的业务部署与生命周期管理效率； 更优的业务性能与用户体验。 云计算的商业动力与技术趋势 用户痛点 在传统IT体系架构下，当前企业基础设施建设与运维所面临的核心痛点问题可以总结概括为如下几点。 平均资源利用率及能耗效率低下：各个IT基础设施单部件的选型、数量以及不同部件的组网连接方案均取决于企业IT收集的各业务部门对于IT核心业务处理量需求的预测和规划。同时所有企业IT应用软件、数据库以及中间件软件均采用独占计算、存储和网络资源的烟囱式部署。软件应用与硬件唯一捆绑，不同应用之间无法动态、高效共享相同的计算与存储资源。加之按照摩尔定律不断翻番增长的CPU计算能力已大大超出应用软件对计算资源利用率的同步能力，导致企业IT的平均资源利用率始终处于低于20%的水平。 新业务上线测试周期长，效率低下：企业任何一项新业务上线，从最基础的硬件平台开始，向上逐层延伸至操作系统、中间件、数据库、CRM/ERP/HRM/PDM/Email/UC等各类业务关键软件堆栈，均需要投入IT专业化团队，进行软件安装、调试、功能与性能验证测试、网络配置及修改调整，然后经过若干轮测试、故障及性能稳定性测试定位及重配置和调整之后，才能最终达到期望正式上线运行的成熟度水准。这个过程一般需要长达2至3个月的时间。 资源储备及弹性伸缩能力不足，不具备应对企业IT突发业务高峰处理的能力：针对特定垂直行业短时间内突发性的高流量、高密度业务需求（比如节假日期间对视频网站的突发业务流程冲击），企业内部物理基础设施资源往往无法满足短时间内迅速获取所需资源的需求，以及处置业务高峰过后的资源闲置问题 企业核心信息资产通过个人办公PC/便携外泄的安全风险：部分企业核心信息资产通过员工个人PC电脑或便携设备外泄给竞争对手，对企业竞争力和商业利益带来负面影响。过分严格的信息安全管控措施又导致了工作效率的下降，企业管理层及员工无法便捷地通过无所不在的网络访问企业防火墙内部的信息资产。 中小型企业希望通过宽带网络管道，从运营商托管应用数据中心“按需获取”其所需的企业IT应用能力：数量众多的中小企业，缺少IT领域专业经验，甚至没有财力和精力建设和维持自己专属的IT部门以及IT基础设施平台，普遍希望可以直接从托管运营商那里获取支撑其日常业务运作所需的SaaS服务。 针对解决上述企业IT系统建设和维护过程中遇到的普遍痛点问题，迫切呼唤业界IT软硬件解决方案提供商借助云计算技术，打造TCO、性价比与效率最优的“IT基础设施私有云及公有云”，具体包括： 面向大型企业和行业领域提供全自动化管理、一站式交付、支持与企业ITIL无缝集成融合、TCO最优化的端到端解决方案，实现企业传统IT基础设施及应用的改造、扩容和新建； 面向中小型企业，提供支持多租户安全隔离与动态发放、超大规模资源池调度管理、可最大限度发挥规模经济效益的公有云托管解决方案。 云计算的商业动力：企业ICT转型 互联网企业的核心竞争力 复杂盈利模式 在盈利模式上，相比传统企业，互联网公司最终设计了更为复杂、先进的盈利模式，即我们通常所说的“羊毛出在狗身上，猪来买单”。相比传统企业，这种盈利模式的好处是，用户接受互联网公司的产品和服务几乎没有利益付出的负面障碍。而最终为互联网提供免费服务的付费者也认为其每笔付出均有所值（这些付费者可能包括风险投资商、在互联网上做广告的企业，或者在互联网平台进行产品销售省去了渠道成本的企业）。这种复杂盈利模式让互联网公司的用户数量可以呈爆发式的增长，从而形成对传统企业的一项巨大的竞争优势。如今互联网公司所设计的盈利模式更加复杂，已经不再是简单的羊、狗、猪这种三方的关系了，而是贯穿全产业链、全商业运作的一种生态模式。而传统企业如今还是以简单的商品买卖这种古老的交易模式为主。这种盈利模式的竞争力差异，可能会让传统企业最终落到“把自己卖了，还在替别人点钱”的尴尬境地。 极低成本 互联网公司的这种复杂盈利模式，必须在规模效应（需要时间培育）下才能获得回报，而放大规模，需要更高的经营成本。这就要求互联网公司，为了活到能够盈利，必须再绞尽脑汁考虑如何降低自身的运营成本。构成互联网公司的主要成本主要是经营互联网网站所需的IT设备成本、IT软件成本、机房租赁成本、网络成本、办公场地成本、人员成本、市场广告成本等。其中IT设备、软件机房、网络以及运维人力的成本是互联网公司的最大成本源。对此，互联网公司不能再购买昂贵的商业IT产品，如产自知名IT厂商的小型机、数据库、操作系统等。他们只能寻求最便宜的解决方案，那就是我们现在看到的x86硬件和几乎全部基于开源软件一起构建的云计算平台。这个云计算平台相比传统企业使用的小型机、商业数据库、高端存储、商业应用软件等方式，成本至少下降了80%以上。而通过云计算的自动化运营技术，其大幅降低了运维人力的需求，一个运维人员可以管理数千台乃至上万台的IT设备。同时，基于云计算平台，其对机房基础设施也进行了优化改造，降低机房的能耗，即电力成本与场地成本。在业务上层，互联网公司千方百计地推进业务流程自动化的工作，使得大量传统企业人工流程在互联网平台上实现全自动化的处理，大幅降低了业务处理成本。 而传统企业，在丰厚的业务利润的滋养下，以及IT部门所处的企业非核心地位下，根本没有动力和条件向互联网公司那样拼命地降低IT成本。在大企业病的氛围下，传统企业所谓的降低成本，往往仅仅是为了一个漂亮的财务报表。实现每年10%～20%的成本下降幅度，即可以完美地达成当年业绩。在这种冰火两重天的环境下，让互联网公司在10年左右的时间里，大幅度地拉开了与传统企业的成本领先优势。如今，在传统金融行业每发放一笔贷款的成本竟然是互联网金融企业的1000倍。 极度的敏捷 为了快速推出业务，互联网公司也是无所不用其极。相比传统企业，互联网公司从人员组织架构、企业文化、经营模式、IT基础设施平台等方面都做了大幅改进。在组织架构上，即使是大型互联网企业，也放弃了传统企业那种逐层审批、大小领导签字画押的环节。业务研发团队自行进行业务决策，缩短内部业务研发外的时间。在企业文化上，为了业务快速上线，没日没夜的工作变得稀松平常，上线后再休息。在经营模式上，也完全打破传统企业把产品完美化再推向市场的策略，而是让位于业务上线时间，互联网公司让业务先上线，通过上线后用户反馈，再继续不断优化产品（规避了传统企业普遍存在的那种闭门造车的模式）。为了加快业务研发进度，在IT基础设施平台方面，互联网公司必须考虑用一个自动化的工具平台，利用这个平台，可以在最短的时间，开发出业务应用，并可以灰度发布，上线后还可以不断地继续完善。这就是我们已经熟知的云计算PaaS平台。经过这种为了加快业务上线速度进行的企业工作流程、组织架构、企业文化、IT平台的重构，互联网企业实现了新业务从研发立项到上线周期不会超过2周，最短只需不到2天的敏捷度。 大数据寡头 至今，大型互联网公司拥有几千PB的数据已经稀松平常了，领先的互联网公司已经走向EB乃至ZB的数量级。而大型传统企业所拥有的数据量，也不过几PB到几十PB，拥有几百个PB数据的传统企业已经少之又少了。双方仅在数据量上就已经达到上百倍的差距。这还只是数据的数量，还不算质量，在数据质量方面，互联网公司对消费者（个人）信息的掌握更是拥有巨大的优势，大型互联网公司的用户数量都是以亿为单位。个人的几乎所有活动信息都会呈现在互联网之上，包括但不限于个人的姓名、电话、住址、社会家庭关系、活动轨迹、资金关系、资产数额、知识能力、个人喜好、照片、影像、银行账号、社会交流、商务交流等。除了个人信息，还有大量的企业信息，包括企业（特别是网上开店企业）的所有经营活动、资金活动、客户信息、市场状况、销售活动、广告活动等。当所有的个人信息和企业信息汇聚起来，又形成了整个经济数据。任何经济领域的风吹草动，都不会逃过互联网厂商大数据监测与分析系统的法眼，而且在信息获取时间方向上比传统企业或机构大幅领先（比如某互联网公司公布的大企业景气指数曲线与国家统计局的指数曲线基本相同，但发布时间却比统计局的提前了5个月以上）。互联网企业获取的精准经济数据又可以反过来进行各种金融与市场商业活动。除了数据质量，在大数据处理技术上，互联网厂商也走在了前列。当大部分传统企业还在靠人工进行市场、经营与投资活动的时候，互联网公司已经开始进入了机器智能主导下的信息收集、分析、决策、处理的时代。 传统企业的ICT转型 传统企业应先认清自己 对于传统企业而言，有个重要的疑问需要解决，那就是为何互联网等信息化平台会成为所有企业的业务核心，即提高IT部门的地位，解决这个疑问的最佳答案是德国提出并已经局部实现的工业4.0概念。在工业4.0的场景下，一个制造企业，从产品的需求提出，到产品设计、原型生产、小批量试制、中等规模试制、测试验证，到大规模生产、物流仓储，再到市场销售的全环节、全流程，全部通过IT系统与互联网体系主导完成。人力工作只是在当前计算机设备能力有限的设计阶段和流程的规范性方面进行有限干预而已。 再以政府运营为例，政府未来的运营路径又是如何呢？政府作为公益、监管、执法机构，最高效率的运作就是利用互联网信息化的技术手段，打通与国家公民中所有企业、个人信息连接的壁垒，构建一个密集网状的信息化公共治理平台。比如：企业与个人的纳税可以在公共交易平台的交易与支付瞬间同时完成，税率也可以实现高度的定制化、个性化，可以针对不同企业经营与家庭状况收取不同税负并可调节。在这个公共信息化平台之上，所有的企业销售的商品与服务全程可追溯。而（企业）公民双方争议的调解和裁决大部分也可以在公共信息平台上解决，如此样例还有很多。政府达到这样一个公共信息化平台的信息化治理高度，这种治理模式实际上在一些互联网平台上已经完全或部分成为了现实，只是治理方是互联网公司而非政府而已。 评估自己的防护壁垒与环境允许的转型窗口期 虽然互联网厂商在向各行各业快速渗透，但出于各行业独有的技术壁垒、监管资质壁垒、资源壁垒、垄断市场壁垒等限制，互联网厂商无法一下子在短时间内通吃一切，气愤之余，也因此给这些壁垒冠以“保护既得利益，阻碍改革深入发展”的帽子。无论如何，这些壁垒给各行业的传统企业一个难得的转型窗口期。不同行业的转型窗口期不尽相同，这跟互联网厂商的基础能力相关。当前阶段互联网公司的基础能力聚集在个人消费者与小企业及个人创业者层面。那么以个人和小企业为目标客户的传统企业，转型窗口期就更短。以大型企业或政府机构为目标客户的传统企业转型窗口期则相对较长。因为经济的运转最终要靠个人，所以任何传统企业都不会有太长的转型窗口期。按照IT更新换代的发展周期预计，短的窗口期也就3～5年，长的窗口期也难以超过10年。 企业云计算的发展趋势 里程碑： 阶段 描述 面向数据中心管理员的IT基础设施资源虚拟化阶段 该阶段的关键特征体现为通过计算虚拟化技术的引入，将企业IT应用与底层的基础设施彻底分离解耦，将多个企业IT应用实例及运行环境（客户机操作系统）复用在相同的物理服务器上，并通过虚拟化集群调度软件，将更多的IT应用复用在更少的服务器节点上，从而实现资源利用效率的提升。 面向基础设施云租户和云用户的资源服务化与管理自动化阶段 该阶段的关键特征体现为通过管理平面的基础设施标准化服务与资源调度自动化软件的引入，以及数据平面的软件定义存储和软件定义网络技术，面向内部和外部的租户，将原本需要通过数据中心管理员人工干预的基础设施资源复杂低效的申请、释放与配置过程，转变为在必要的限定条件下（比如资源配额、权限审批等）的一键式全自动化资源发放服务过程。面向云租户的基础设施资源服务供给，可以是虚拟机形式，可以是容器（轻量化虚拟机），也可以是物理机形式。该阶段的企业IT云化演进，暂时还不涉及基础设施层之上的企业IT应用与中间件、数据库软件架构的变化 面向企业IT应用开发者及管理维护者的企业应用架构的分布式微服务化和企业数据架构的互联网化重构及大数据智能化阶段 该阶段的关键特征体现为：企业IT自身的应用架构逐步从纵向扩展应用分层架构体系，走向（依托开源增强的、跨不同业务应用领域高度共享的）数据库、中间件平台服务层以及（功能更加轻量化解耦、数据与应用逻辑彻底分离的）分布式无状态化架构，从而使得企业IT在支撑企业业务敏捷化、智能化以及资源利用效率提升方面迈上一个新的高度和台阶，并为企业创新业务的快速迭代开发铺平了道路。 云计算各阶段间的主要差异： 从IT非关键应用走向电信网络应用和企业关键应用 在云计算的计算虚拟化技术发展初期阶段，Guest OS与Host OS之间的前后端I/O队列在I/O吞吐上的开销较大，而传统的结构化数据由于对I/O性能吞吐和时延要求很高，这两个原因导致很多事务关键型结构化数据在云化的初期阶段并未被纳入虚拟化改造的范畴，从而使得相关结构化数据的基础设施仍处于虚拟化乃至云计算资源池的管理范围之外。然而随着虚拟化XEN/KVM引擎在I/O性能上的不断优化提升（如采用SR-IOV直通、多队列优化技术），使得处于企业核心应用的ERP等关系型关键数据库迁移到虚拟化平台上实现部署和运行已不是问题 从计算虚拟化走向存储虚拟化和网络虚拟化 对于存储来说，由于最基本的硬盘（SATA/SAS）容量有限，而客户、租户对数据容量的需求越来越大，因此必须考虑对数据中心内跨越多个松耦合的分布式服务器单元内的存储资源（服务器内的存储资源、外置SAN/NAS在内的存储资源）进行“小聚大”的整合，组成存储资源池。这个存储资源池，可能是某一厂家提供的存储软硬件组成的同构资源池，也可以是被存储虚拟化层整合成为跨多厂家异构存储的统一资源池。各种存储资源池均能以统一的块存储、对象存储或者文件的数据面格式进行访问。 在多租户虚拟化的环境下，不同租户对于边缘的路由及网关设备的配置管理需求也存在极大的差异化，而物理路由器和防火墙自身的多实例能力也无法满足云环境下租户数量的要求，采用与租户数量等量的路由器与防火墙物理设备，成本上又无法被多数客户所接受。于是人们思考是否可能将网络自身的功能从专用封闭平台迁移到服务器通用x86平台上来。这样至少网络端节点的实例就可以由云操作系统来直接自动化地创建和销毁，并通过一次性建立起来的物理网络连接矩阵，进行任意两个网络端节点之间的虚拟通讯链路建立，以及必要的安全隔离保障，从而里程碑式地实现了业务驱动的网络自动化管理配置，大幅度降低数据中心网络管理的复杂度。 资源池从小规模的资源虚拟化整合走向更大规模的资源池构建，应用范围从企业内部走向多租户的基础设施服务乃至端到端IT服务 通过虚拟化整合之后的资源池的服务对象，不能再仅仅局限于数据中心管理员本身，而是需要扩展到每个云租户。因此云平台必须在基础设施资源运维监控管理Portal的基础上，进一步面向每个内部或者外部的云租户提供按需定制基础设施资源，订购与日常维护管理的Portal或者API界面，并将虚拟化或者物理的基础设施资源的增、删、改、查等权限按照分权分域的原则赋予每个云租户，每个云租户仅被授权访问其自己申请创建的计算、存储以及与相应资源附着绑定的OS和应用软件资源，最终使得这些云租户可以在无须购买任何硬件IT设备的前提下，实现按需快速资源获取，以及高度自动化部署的IT业务敏捷能力的支撑，从而将云资源池的规模经济效益，以及弹性按需的快速资源服务的价值充分发掘出来。 数据规模从小规模走向海量，数据形态从传统结构化走向非结构化和半结构化 对非结构化、半结构化大数据的处理而产生的数据计算和存储量的规模需求，已远远超出传统的Scale-Up硬件系统可以处理的，因此要求必须充分利用云计算提供的Scale-Out架构特征，按需获得大规模资源池来应对大数据的高效高容量分析处理的需求。企业内日常事务交易过程中积累的大数据或者从关联客户社交网络以及网站服务中抓取的大数据，其加工处理往往并不需要实时处理，也不需要系统处于持续化的工作态，因此共享的海量存储平台，以及批量并行计算资源的动态申请与释放能力，将成为未来企业以最高效的方式支撑大数据资源需求的解决方案选择。 企业和消费者应用的人机交互计算模式，也逐步从本地固定计算走向云端计算、移动智能终端及浸入式体验瘦终端接入的模式 为应对云接入管道上不同业务类型对业务体验的不同诉求，业界通用的远程桌面接入协议在满足本地计算体验方面已越来越无法满足当前人机交互模式发展所带来的挑战，需要重点聚焦解决面向IP多媒体音视频的端到端QoS/QoE优化，并针对不同业务类别加以动态识别并区别处理，使其满足如下场景需求。 云资源服务从单一虚拟化，走向异构兼容虚拟化、轻量级容器化以及裸金属物理机服务器 基于共享Linux内核，对应用实例的运行环境以容器为单位进行隔离部署，并将其配置信息与运行环境一同打包封装，并通过容器集群调度技术（如Kubernetes）实现高并发、分布式的多容器实例的快速秒级发放及大规模容动态编排和管理，从而将大规模软件部署与生命周期管理，以及软件DevOps敏捷快速迭代开发与上线效率提升到了一个新的高度。从长远趋势上来看，容器技术终将以其更为轻量化、敏捷化的优势取代虚拟化技术，但在短期内仍很难彻底解决跨租户的安全隔离和多容器共享主机超分配情况下的资源抢占保护问题，因此，容器仍将在可见的未来继续依赖跨虚拟机和物理机的隔离机制来实现不同租户之间的运行环境隔离与服务质量保障。 云平台和云管理软件从闭源、封闭走向开源、开放 随着XEN/KVM虚拟化开源，以及OpenStack、CloudStack、Eucalyptus等云操作系统OS开源软件系统的崛起和快速进步，开源力量迅速发展壮大起来，迎头赶上并逐步成长为可以左右行业发展格局的重要决定性力量。 云计算的架构内涵与关键技术 云计算总体架构 企业数据中心IT架构正在面临一场前所未有的，以“基础设施软件定义与管理自动化”、“数据智能化与价值转换”以及“应用架构开源化及分布式无状态化”为特征的转化。 基础设施资源层融合 面向企业IT基础设施运维者的数据中心计算、存储、网络资源层，不再体现为彼此独立和割裂的服务器、网络、存储设备，以及小规模的虚拟化资源池，而是通过引入云操作系统，在数据中心将多个虚拟化集群资源池统一整合为规格更大的逻辑资源池，甚至进一步将地理上分散、但相互间通过MPLS/VPN专线或公网连接的多个数据中心以及多个异构云中的基础设施资源整合为统一的逻辑资源池，并对外抽象为标准化、面向外部租户（公有云）和内部租户（私有云）的基础设施服务，租户仅需制定其在软件定义的API参数中所需资源的数量、SLA/QoS及安全隔离需求，即可从底层基础设施服务中以全自动模式弹性、按需、敏捷地获取到上层应用所需的资源配备。 数据层融合 面向企业日常业务经营管理者的数据信息资产层，不再体现为散落在各个企业、消费者IT应用中，如多个看似关联不大的结构化事务处理记录（关系型数据库）数据孤岛，非结构化的文档、媒体以及日志数据信息片段，而是通过引入大数据引擎，将这些结构化与非结构化的信息进行统一汇总，汇聚存储和处理，基于多维度的挖掘分析与深度学习，从中迭代训练出对业务发展优化及客户满意度提升有关键价值的信息，从而将经营管理决策从纯粹依赖人员经验积累转变到更多依赖基于大数据信息内部蕴藏的智慧信息，来支撑更科学、更敏捷的商业决策。除大数据之外，数据层融合的另一个驱动力，来自于传统商业数据库在处理高并发在线处理及后分析处理扩展性方面所遭遇的不可逾越的架构与成本的瓶颈，从而驱动传统商业闭源数据库逐步被Scale Out架构的数据库分表分库及水平扩展的开源数据库所替代。 应用平台层融合 企业IT业务开发者和供应者的应用平台层开始积极探索基于云应用开发平台来实现跨应用领域基础公共开发平台与中间件能力去重整合，节省重复投入，同时通过在云开发平台中集成透明的开源中间件来替代封闭的商业中间件平台套件，特别通过引入面向云原生应用的容器化应用安装、监控、弹性伸缩及生命周期版本灰度升级管理的持续集成与部署流水线，来推动企业应用从面向高复杂度、厚重应用服务的瀑布式开发模式，逐步向基于分布式、轻量化微服务的敏捷迭代、持续集成的开发模式演进。 云计算架构上下文 云计算架构应用上下文的相关角色包括：云租户/服务消费者、云应用开发者、云服务运营者/提供者、云设备提供者 从上述云计算的基础上下文描述，我们不难看出云平台和云运营与运维管理系统是介于上层多租户的IT应用、传统数据中心管理软件，以及下层数据中心物理基础设施层之间的一层软件。其中云平台可进一步被分解为面向基础设施整合的云操作系统，面向数据整合的大数据引擎，以及面向应用中间件整合的应用开放平台。而云运营与运维管理系统在云计算引入的初期，与传统数据中心管理系统是并存关系，最终将逐步取代传统数据中心管理。 云平台的南向接口IF4向下屏蔽底层千差万别的物理基础设施层硬件的厂家差异性。针对应用层软件以及管理软件所提出的基础设施资源、数据处理以及应用中间件服务诉求，云平台系统向上层多租户的云应用与传统数据中心管理软件屏蔽如何提供资源调度、数据分析处理，以及中间件实现的细节，并在北向接口IF1、IF2和IF3为上层软件及特定租户提供归一化、标准化的基础设施服务（IaaS）、数据处理及应用平台服务（PaaS）API服务接口。在云平台面向云运营与管理者（拥有全局云资源操作权限）的IF3接口，除了面向租户的基础设施资源生命周期管理API之外，还包括一些面向物理、虚拟设施资源及云服务软件日常OAM运行健康状态监控的操作运维管理API接口。 其中IF1/IF2/IF3接口中关于云租户感知的云平台服务API的典型形态为Web RESTful接口。IF4接口则为业务应用执行平面的x86指令，以及基础设施硬件特有的、运行在物理主机特定类型OS中的管理Agent，或者基于SSL承载的OS命令行管理连接。IF3接口中的OAM API则往往采用传统IT和电信网管中被广泛采用的Web RESTful、SNMP、CORBA等接口。 云计算的典型技术参考架构 物理资源层 所有支撑IaaS层的IT基础设施硬件，其中包括服务器、存储（传统RAID架构垂直扩展的Scale Up存储和基于服务器的分布式水平扩展的Scale Out存储），以及数据中心交换机（柜顶、汇聚以及核心交换）、防火墙、VPN网关、路由器等网络安全设备。 虚拟资源层 （1）计算虚拟化 所有计算应用（含OS）并非直接承载在硬件平台上，而是在上层软件与裸机硬件之间插入了一层弹性计算资源管理及虚拟化软件：弹性计算资源管理软件对外负责提供弹性计算资源服务管理API，对内负责根据用户请求调度分配具体物理机资源；虚拟化软件（Hypervisor）对来自所有的x86指令进行截获，并在不为上层软件（含OS）所知的多道执行环境并行执行“仿真操作”，使得从每个上层软件实例的视角，仍然是在独占底层的CPU、内存以及I/O资源；而从虚拟化软件的视角，则是将裸机硬件在多个客户机（VM）之间进行时间和空间维度的穿插共享（时间片调度、页表划、I/O多队列模拟等）。 虚拟化环境下更高的内存访问效率：应用感知的大内存业务映射技术，通过该技术，可有效提升从虚拟机线性逻辑地址到最终物理地址的映射效率。 虚拟化环境下更高的CPU指令执行效率：通过对机器码指令执行的流程进行优化扫描，通过将相邻执行代码段中的“特权”指令所触发的“VM_Exit”虚拟化仿真操作进行基于等效操作的“合并”，从容达到在短时间内被频繁反复地执行。由于每次VM_Exit上下文进入和退出的过程都需要涉及系统运行队列调度以及运行环境的保存和恢复，即将多次上下文切换合并为一次切换，从而达到提升运行效率的目的。 虚拟化环境下更高的I/O和网络包收发处理效率：由于多个虚拟机在一个物理机内需要共享相同的物理网卡进行网络包收发处理，为有效减少中断处理带来的开销，在网络及I/O发包过程中，通过将小尺寸分组包合并为更大尺寸的分组包，可以减少网络收发接受端的中断次数，从而达到提升虚拟机之间网络吞吐率的目的。 更高的RAS可靠性保障：针对云计算所面临的电信领域网络及业务云化的场景，由于硬件故障被虚拟化层屏蔽了，使得物理硬件的故障无法像在传统物理机运行环境那样直接被传送通知给上层业务软件，从而导致上层业务层无法对故障做出秒级以内的及时响应，比如业务层的倒换控制，从而降低了对整体可靠性水平。如何感知上层的业务要求，快速进行故障检测和故障恢复，保证业务不中断，这给计算虚拟化带来了新的挑战。 单VM及多VM的弹性伸缩技术：单VM及多VM的弹性伸缩技术包括基本资源部件级别、虚拟机级别、云系统级别三个层次的伸缩技术。基本资源部件级别：精细化的Hypervisor资源调度，对指定虚拟机实例的CPU、内存及存储规格进行弹性伸缩，并可对伸缩上下限进行配额限制。虚拟机级别：指虚拟机集群的自动扩展与收缩，基于CloudWatch机制对集群资源忙闲程度的监控，对业务集群进行集群伸缩与扩展的Auto-Scaling控制。云系统级别：在内部私有云资源不足的情况下，自动向外部公有云或其他私有云（计算及存储资源池）“租借”及“释放”资源。 （2）存储虚拟化 通过对所有来自应用软件层的存储数据面的I/O读写操作指令进行“截获”，建立从业务应用视角覆盖不同厂家、不同版本的异构硬件资源的统一的API接口，进行统一的信息建模，使得上层应用软件可以采用规范一致的**、与底层具体硬件内部实现细节解耦的方式访问底层存储资源**。 通过“存储虚拟化”层内对多个对等的分布式资源节点的聚合，实现该资源的“小聚大”。比如，将多个存储/硬盘整合成为一个容量可无限扩展的超大（EB级规模）的共享存储资源池。由此可以看到，存储虚拟化相对计算虚拟化最大的差别在于：其主要定位是进行资源的“小聚大”，而非“大分小”。原因在于，存储资源的 “大分小”在单机存储以及SAN/NAS独立存储系统，乃至文件系统中通过LUN划分及卷配置已经天然实现了，然而随着企业IT与业务数据的爆炸式增长，需要实现高度扁平化、归一化和连续空间，跨越多个厂家服务器及存储设备的数据中心级统一存储，即“小聚大”。存储“小聚大”的整合正在日益凸显出其不可替代的关键价值。 高性能分布式存储引擎：伴随着云计算系统支撑的IT系统越来越大，覆盖范围从不同服务器存储节点，到分布在不同地理区域的数据中心，这就需要有一个分布式存储引擎。这个引擎，能满足高带宽、高I/O等各种场景要求，能很好地进行带宽的扩展。 存储异构能力：如何利旧，将不同厂家原有的独立SAN、NAS设备组合成一个大的存储资源池，也是软件定义存储中需要解决的问题 存储卸载：传统的企业存储系统，在采用各种各样的存储软件，这些软件存储操作对存储I/O和CPU资源均有较大消耗，会影响到用户业务性能的发挥。因此，如何将存储操作标准化，然后将存储操作利用某些标准的硬件动作去代替，这就是存储卸载。 （3）网络虚拟化 Cloud OS管理的资源范畴扩展到了整个数据中心，甚至将跨越多个由广域网物理或者逻辑专线连接起来数据中心。在一个具备一定规模的数据中心内，甚至多个数据中心内，各计算、存储单元之间以完全点对点的方式进行松耦合的网络互联。云数据中心之上承载的业务种类众多，各业务类型对于不同计算单元（物理机、虚拟机）之间，计算单元与存储单元之间，乃至不同安全层次的计算单元与外部开放互联网网络和内部企业网络之间的安全隔离及防护机制要求动态实现不同云租户之间的安全隔离。云数据中心还要满足不同终端用户不同场景的业务组网要求以及他们的安全隔离要求。因此，云操作系统的复杂性将随着云租户及租户内物理机和虚拟机实例的数量增长呈现几何级数的增长，由业务应用驱动的数据中心网络虚拟化和自动化已变得势在必行和不可或缺。为了实现彻底与现有物理硬件网络解耦的网络虚拟化与自动化，唯一的途径与解决方案就是SDN（也即所谓软件定义的网络），即构建出一个与物理网络完全独立的叠加式逻辑网络，其主要部件以及相关技术包括以下几方面。 SDN控制器：这是软件定义网络的集中控制模块。负责云系统中网络资源的自动发现和池化、根据用户需求分配网络资源、控制云系统中网络资源的正常运行。 虚拟交换机：根据SDN控制器，创建出的虚拟交换机实例。可以对这个虚拟交换机进行组网的设计、参数的设置，一如对物理交换机的使用。 虚拟路由器：根据SDN控制器，创建出的虚拟路由器实例。可以对这个虚拟路由器进行组网的设计、参数的设置，一如对物理路由器的使用。 虚拟业务网关：根据用户业务的申请，由SDN控制器创建出虚拟业务网关实例，提供虚拟防火墙的功能。可以对这个虚拟业务网关进行组网的设计、参数的设置，一如对物理业务网关的使用。 虚拟网络建模：面对如此复杂多变的组网，如何保证网络的有效区分和管理，又能保证交换和路由的效率，一个有效的建模方法和评估模型是需要的。虚拟网络建模技术能提前预知一个虚拟网络的运行消耗、效率和安全性。虚拟网络建模可以做成一个独立功能库，在需要的时候启动，以减少对系统资源的占用。 资源服务与调度层 相对虚拟化层在业务执行面和数据面上“资源聚合与分割仿真”，该层次主要体现为管理平面上的“逻辑资源调度”。 由于多个厂家已经投入到云计算的研发和实施中，不可避免地有多种实现方式。而要实现云计算真正的产业化并被广泛使用，各厂家的云计算平台必须要能够互相交互，即进行接口标准化。接口标准化后，主流的虚拟化平台，例如Hyper-V、KVM、UVP、ESX等之间能够互相兼容。各个硬件厂家或者中间件厂家可以自由选择虚拟化内核。 在云计算新的发展阶段中，面向公有云、面对国际化公司的分布式云系统将是重点。这样引发对超大资源的分配和调度。在整个云计算的实现架构上，计算、存储、网络资源的分配和使用将走向专业化。这是因为一个云应用业务，根据性质的不同，它对计算、存储、网络资源的需求可能是不一样的。例如：呼叫中心业务偏向于计算资源使用，而对于网盘业务则偏向于存储资源使用。在这种情况下，为了更有效地利用资源，给业务层提供基本资源调用API是最好的选择，将计算、存储、网络资源都作为基本资源单位，提供统一的资源调用接口，让云业务开发者自己选择如何高效地使用这些资源。这些API包括以下几个方面。 弹性计算资源调用API：计算资源包括CPU和内存，云计算平台根据云运营商的要求，已经将CPU和内存虚拟化和池化。系统提供资源的动态申请、释放、故障检测、隔离和自动切换功能，做到业务不感知。CPU资源又可以分为纯计算型、图像处理型等不同类型。不管是CPU还是内存，都提供瘦分配功能，资源的自动伸缩保证在低业务量时减少资源的消耗，高业务量时开启所有物理资源，确认业务的高效运行。计算资源API还需要提供集群能力。 弹性存储资源调用API：存储资源API提供文件或者卷接口，除了提供常见的资源申请、释放、瘦分配等功能外，还涉及其他几个关键方面。 异构资源的池化：不同的厂家在将存储资源池化后，提供统一的API，一个厂家可以利用这些API，将不同厂家的存储资源池构成一个大的资源池，然后再封装出API供业务调用。 存储资源的分层分级存储：因业务性能要求的不同，分层存储是一个常用的技术，业务系统在申请存储资源的时候，可以选择是否使用这个特性。 内存存储资源的支持：未来的系统，内存一定会成为主存，所有的存储，除非一些特别重要的信息，基本上不再需要存入非易失性介质。而使用内存资源作为主存，可靠性是关键要求。在构造内存存储池的时候，可靠性必须贯彻始终，每个内存存储在其他地方有备份，或者确保内存存储有可靠的UPS保护。 弹性网络资源调用API：网络资源API的基本功能也包括资源的申请、释放、监控、故障隔离和恢复等，也需要考虑异构资源的统一化。 拉通公有云与私有云的混合云架构 我们也不难发现，很多大企业及政府机构在面临云计算的建设使用模式的选择时，不可避免地将安全性问题放在了一个非常重要的位置上，甚至是作为首要考量的因素。目前，仅有在自建数据中心及自己维护管理组织的掌控范围内私有云模式才能保障企业敏感涉密的关键信息资产。这一事实决定了私有云仍将是很多大企业建设云计算首要选择的模式，私有云仍将与公有云在未来相当长一段时间内并存发展。只有拉通公有云和私有云的混合云能够将线上的公有云弹性敏捷优势，与私有云的安全私密保障优势相结合，实现优势互补，才能成为企业的最佳选择。 然而，考虑到大企业、政府机构等的业务负载的多样性，需要向云端迁移的应用并不仅仅包含核心涉密的信息资产，也包括业务突发性强，资源消耗量大，并且具备资源使用完毕之后可以立即释放的特征，比如开发测试应用、大数据分析计算应用、电商渠道的分布式Web前端应用等，均属于此类应用负载。这些应用当然也更适合采用公有云的方式来承载。但对于同一企业租户来说，如果一部分应用负载部署在公有云端，另一部分应用负载部署在私有云端，则仅仅跨云的身份认证、鉴权、拉通的统一发放及API适配是不够的，更重要的是必须实现拉通公有云和私有云的安全可信网络，实现自动化建立网络连接。 为满足上述诉求，需要跨不同的公有云和私有云，构建一层统一的混合云编排调度及API开放层，实现跨不同异构云的统一信息模型，并通过适配层将不同异构私有云、公有云的云服务及API能力集，对齐到混合云的统一信息模型，并通过SDN与各公有云、私有云的网络控制功能相配合，最终完成跨异构云网络互联的自动化。当然这个统一编排调度引擎，以及API开放层的实现架构，存在不同的可选路径。 引入一个全新的编排调度层，逐一识别出跨不同异构云的公共服务能力，并以此公共能力及其信息建模为基础参照，进行到各公有云、私有云的计算，存储原生API能力的逐一适配。该路径下的跨云网络互联方案，需要混合云SDN与各公有云、私有云的VPN网络服务进行紧密协同配合，由于不同异构云之间的网络服务语义及兼容性相比计算和存储服务差别更大，因此也必然给跨云的VPN网络连接适配处理带来了更大的复杂度与挑战。 依托于业界开源事实标准的云服务与调度层（如OpenStack），作为拉通各异构公有云、私有云的信息模型及API能力的基准，通过社区力量推动各异构云主动提供与该事实标准兼容的适配驱动。该路径下的跨云网络互联，采用叠加在所有异构云虚拟化之上的Overlay虚拟网络机制，无须进行跨异构云的网络模型适配转换，即可面向租户实现按需的跨云网络互联，从而大大降低了跨云网络互联处理的难度，为混合云的广泛普及奠定了坚实的基础。 可靠性保障 数据中心内的可靠性保障技术 数据中心内的可靠性保障技术主要包括HA（High Availability）冷备份、FT（Fault Tolerance）热备份、轻量级FT。 HA（High Availability） 冷备份数据中心内基于共享存储的冷迁移，在由于软件或硬件原因引发主用VM/PM故障的情况下，触发应用在备用服务器上启动。其适用于不要求业务零中断或无状态应用的可靠性保障。 FT（Fault Tolerance） 热备份其指指令、内存、所有状态数据同步。该方式的优势是状态完全同步，完全保证一致性，且支持SMP。劣势是性能开销大，会带来40%左右的性能降低。 轻量级FT 其是基于I/O同步的FT热备机制。优势是CPU/网络性能损耗10%以内，支持单核和多核。劣势是适合于网络I/O为主服务的场景。 跨数据中心的可靠性保障技术 跨数据中心的可靠性保障技术，主要是基于存储虚拟化层I/O复制的同步和异步容灾两种。基于存储虚拟化层I/O复制的同步容灾，采用生产和容灾中心同城（＜100KM）部署，时延小于5ms,DC间带宽充裕，并且对RPO（恢复点目标）要求较高，一般RPO接近或者等于0秒。分布式块存储提供更高效的I/O同步复制效率。 基于存储虚拟化层I/O复制的异步容灾采用生产和容灾中心异地（大于100KM）部署，带宽受限，时延大于5ms，同时对RPO有一定的容忍度，如RPO大于5分钟。I/O复制及快照对性能的影响趋近于零。 云计算核心架构竞争力 云计算及大数据开源软件概览 项目 描述 OpenStack 云操作系统框架，基于这个框架，可以集成不同的各类组件，实现满足不同场景需要的云操作系统，并在此基础上，最终构建完整的云计算系统。在计算领域，可以插件化的形式接入KVM、Xen、vCenter、FusionCompute等不同的Hypervisor；在存储领域，可以以插件化的形式实现对不同厂商的存储设备，以及Ceph、FusionStorage、vSAN等不同的软件定义存储的管理；在网络领域，可以实现对不同的网络硬件设备，OVS、Liunx-bridge、HAProxy等开源网络组件，以及多种SDN控制器的接入。 Kubernetes /Mesos / Docker Mesos生态：核心组件包括Mesos容器集群资源管理调度以及不同的应用管理框架。典型的应用管理框架包括Marathon和Chronos，其中Marathon用来管理长期运行服务，如Web服务；Chronos用来管理批量任务。Mesos生态主要由Mesosphere、Twitter等公司主力推动。 Kubernetes生态：Google公司发起的社区项目，涵盖容器集群资源管理调度，以及不同类型应用的应用管理组件。例如副本可靠性管理，服务发现和负载均衡，灰度升级，配置管理等组件。 Docker生态：Docker公司希望向容器生态系统上层发展，推出了Swarm容器资源管理调度组件，以及Compose应用编排组件。 Hadoop/Spark Hadoop来自Apache社区，是一个可水平扩展、高可用、容错的海量数据分布式处理框架，提供了简单分布式编程模型map-reduce。Hadoop设计的假设是底层硬件不可靠，由Hadoop检测和处理底层硬件失效 本文对于云计算的架构设计做了初步总结，后面会细化各个技术和应用场景，分开描述。","categories":[{"name":"经验总结","slug":"经验总结","permalink":"https://blackforest1990.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"云计算","slug":"云计算","permalink":"https://blackforest1990.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}]},{"title":"Tcp&ip","slug":"Tcp-ip","date":"2024-01-16T04:52:04.000Z","updated":"2024-01-23T06:28:32.592Z","comments":true,"path":"2024/01/16/Tcp-ip/","link":"","permalink":"https://blackforest1990.github.io/2024/01/16/Tcp-ip/","excerpt":"","text":"本文基于一个TCP&amp;IP项目进行学习，主要目的是来探索网络编程的奇妙。如下为本次学习的一些网络库和知识库。 代码参考：https://github.com/saminiir/level-ip 基础知识参考：https://beej-zhcn.netdpi.net/ TCP&amp;IP 协议层 网络接口层（Network Interface Layer）： 对应于OSI模型的物理层和数据链路层。负责将数据帧封装成比特流，并处理与物理网络设备的交互。 网络层（Internet Layer）： 对应于OSI模型的网络层。主要功能是在网络中路由数据包，为数据包选择最佳路径。IP协议是在这一层工作的关键协议。 传输层（Transport Layer）： 对应于OSI模型的传输层。负责端到端的通信，提供可靠的数据传输。TCP（传输控制协议）和UDP（用户数据报协议）是在这一层工作的协议。 应用层（Application Layer）： 对应于OSI模型的会话层、表示层和应用层。包含了各种应用程序，如HTTP（超文本传输协议）、FTP（文件传输协议）、SMTP（简单邮件传输协议）等。 Ethernet &amp; ARP TAP设备 为了拦截来自 Linux 内核的低级网络流量，我们将使用 Linux TAP 设备。简而言之，网络用户空间应用程序通常使用 TUN/TAP 设备分别操作 L3/L2 流量。在Linux中，TAP代表（Tap Virtual Network Device）。TAP设备是一种虚拟网络设备，通常用于模拟网络连接或实现虚拟专用网络（VPN）等网络功能。由于我们想要从第 2 层开始构建网络堆栈，因此我们需要一个 TAP 设备。我们像这样实例化它： 123456789101112131415161718192021222324252627282930313233static int tun_alloc(char *dev)&#123; struct ifreq ifr; int fd, err; if( (fd = open(&quot;/dev/net/tap&quot;, O_RDWR)) &lt; 0 ) &#123; perror(&quot;Cannot open TUN/TAP dev\\n&quot; &quot;Make sure one exists with &quot; &quot;&#x27;$ mknod /dev/net/tap c 10 200&#x27;&quot;); exit(1); &#125; CLEAR(ifr); /* Flags: IFF_TUN - TUN device (no Ethernet headers) * IFF_TAP - TAP device * * IFF_NO_PI - Do not provide packet information */ ifr.ifr_flags = IFF_TAP | IFF_NO_PI; if( *dev ) &#123; strncpy(ifr.ifr_name, dev, IFNAMSIZ); &#125; if( (err = ioctl(fd, TUNSETIFF, (void *) &amp;ifr)) &lt; 0 )&#123; perror(&quot;ERR: Could not ioctl tun&quot;); close(fd); return err; &#125; strcpy(dev, ifr.ifr_name); return fd;&#125; 在这之后，返回的文件描述符fd可以用于读取和写入数据到虚拟设备的以太网缓冲区。IFF_NO_PI标志在这里非常关键，否则我们将得到不必要的数据包信息附加到以太网帧之前。 以太网帧格式 多种不同的以太网技术是连接局域网(LAN) 中计算机的支柱。 以太网标准：https://en.wikipedia.org/wiki/IEEE_802.3 接下来，我们将看一下以太网帧头。可以将其声明为 C 结构体，如下所示： 1234567struct eth_hdr &#123; uint8_t dmac[6]; uint8_t smac[6]; uint16_t ethertype; uint8_t payload[];&#125; __attribute__((packed)); dmac smac: 它们包含通信双方的 MAC 地址（分别是目标和源）。 重载字段ethertype是一个 2 个八位字节的字段，根据其值，指示有效负载的长度或类型。具体来说，如果该字段的值大于或等于1536，则该字段包含有效负载的类型（例如IPv4、ARP）。如果该值小于该值，则它包含有效负载的长度。 在类型字段之后，以太网帧可能有几个不同的标签。这些标签可用于描述帧的虚拟 LAN (VLAN) 或服务质量(QoS) 类型。以太网帧标签被排除在我们的实现之外，因此相应的字段也不会出现在我们的协议声明中。 payload包含指向以太网帧有效负载的指针。在我们的例子中，这将包含 ARP 或 IPv4 数据包。如果有效负载长度小于所需的最小48字节（不含标签），则将填充字节附加到有效负载的末尾以满足要求。 我们还包含if_ether.hLinux 标头来提供以太类型及其十六进制值之间的映射。 最后，以太网帧格式末尾还包括帧校验序列字段，该字段与循环冗余校验（CRC）一起用于检查帧的完整性。我们将在实现中省略对该字段的处理。 __attribute__((packed))：这是一个GCC特有的属性，用于告诉编译器以最小的字节对齐方式来布局结构体，确保没有额外的填充字节。这对于网络协议帧头等需要严格字节对齐的结构体来说是重要的。 以太网帧解析 解析和处理传入以太网帧的总体场景非常简单： 1234567if (tun_read(buf, BUFLEN) &lt; 0) &#123; print_error(&quot;ERR: Read from tun_fd: %s\\n&quot;, strerror(errno));&#125;struct eth_hdr *hdr = init_eth_hdr(buf);handle_frame(&amp;netdev, hdr); 地址解析协议 地址解析协议（ARP）用于将48位以太网地址（MAC地址）动态映射到协议地址（例如IPv4地址）。这里的关键是，通过 ARP，可以使用多种不同的 L3 协议：不仅是 IPv4，还有其他协议。通常的情况是知道 LAN 中某些服务的 IP 地址，但要建立实际通信，还需要知道硬件地址 (MAC)。因此，ARP用于广播和查询网络，要求IP地址的所有者报告其硬件地址。 ARP数据包格式比较简单： 123456789struct arp_hdr&#123; uint16_t hwtype; uint16_t protype; uint8_t hwsize; uint8_t prosize; uint16_t opcode; unsigned char data[];&#125; __attribute__((packed)); ARP 标头 ( arp_hdr) 包含 2 个八位字节hwtype，它确定所使用的链路层类型。在我们的例子中，这是以太网，实际值为0x0001。 2 个八位字节protype字段指示协议类型。在我们的例子中，这是 IPv4，通过值 进行通信0x0800。 hwsize（硬件地址长度）： 一个8位的整数，表示硬件地址的长度，以字节为单位 prosize（协议地址长度）：一个8位的整数，表示协议地址的长度，以字节为单位。 2 个八位字节字段opcode声明 ARP 消息的类型。它可以是 ARP 请求 (1)、ARP 应答 (2)、RARP 请求 (3) 或 RARP 应答 (4)。 该data字段包含 ARP 消息的实际负载，在我们的例子中，它将包含 IPv4 特定信息： 1234567struct arp_ipv4&#123; unsigned char smac[6]; uint32_t sip; unsigned char dmac[6]; uint32_t dip;&#125; __attribute__((packed)); 这些字段非常不言自明。smac dmac分别包含发送方和接收方的 6 字节 MAC 地址。sip和dip分别包含发送者和接收者的 IP 地址。 地址解析算法 检查硬件类型（ar$hrd）： 如果硬件类型存在（几乎肯定存在），继续。 可选地检查硬件长度（ar$hln）： 检查协议类型（ar$pro）： 如果协议类型存在，继续。 可选地检查协议长度（ar$pln）： 初始化Merge_flag为false： 检查转换表中是否存在 &lt;协议类型，发送者协议地址&gt; 这一对： 如果已存在： 使用数据包中的新信息更新该条目的发送者硬件地址字段。 将 Merge_flag 设置为 true。 检查当前设备是否是目标协议地址： 如果是： 如果 Merge_flag 为false，则将 &lt;协议类型，发送者协议地址，发送者硬件地址&gt; 添加到转换表中。 检查操作码是否是ARP请求 (ares_op$REQUEST)： 如果是： 交换硬件和协议字段，将本地硬件和协议地址放入发送者字段。 将 ar$op 字段设置为 ares_op$REPLY。 将数据包发送到在同一硬件上收到请求时的新目标硬件地址。 这个算法描述了在接收到ARP请求时的处理流程，包括更新转换表、响应ARP请求和发送ARP回复。 translation table用于存储 ARP 结果，以便主机只需查找其缓存中是否已有该条目即可。这可以避免向网络发送冗余 ARP 请求的垃圾邮件。 IPv4 and ICMPv4 IPv4 我们的实现中的下一层 (L3)（在以太网帧之后）处理将数据传送到目的地的情况。也就是说，互联网协议(IP) 的发明是为了为 TCP 和 UDP 等传输协议提供基础。它是无连接的，这意味着与 TCP 不同，所有数据报在网络堆栈中都是相互独立处理的。这也意味着 IP 数据报可能会无序到达。 此外，IP 并不能保证成功传输。这是协议设计者有意识的选择，因为 IP 旨在为同样不保证传输的协议提供基础。UDP 就是这样一种协议。如果通信双方之间需要可靠性，则可以在 IP 之上使用 TCP 等协议。在这种情况下，更高级别的协议负责检测丢失的数据并确保所有数据均已传输。 Header IPv4 标头的长度通常为 20 个八位位组。标头可以包含尾随选项，但我们的实现中省略了它们。字段的含义相对简单，可以用 C 结构体来描述： 123456789101112131415struct iphdr &#123; uint8_t ihl : 4; /* TODO: Support Big Endian hosts */ uint8_t version : 4; uint8_t tos; uint16_t len; uint16_t id; uint16_t frag_offset; uint8_t ttl; uint8_t proto; uint16_t csum; uint32_t saddr; uint32_t daddr; uint8_t [];&#125; __attribute__((packed)); 4 位字段version指示 Internet 标头的格式。在我们的例子中，IPv4 的值为 4。 互联网报头长度字段ihl的长度同样为 4 位，由于该字段的大小为 4 位，因此它最多只能容纳 15。因此，IP 标头的最大长度为 60 个八位字节（15 乘以 32 除以 8）。 服务类型字段源自tos为IP 数据报的服务质量。 总长度字段len 传达整个 IP数据报的长度。由于它是 16 位字段，因此最大长度为 65535 字节。大型 IP 数据报会被分割成更小的数据报，以满足不同通信接口的最大传输单元(MTU)。 id字段用于索引数据报，最终用于重组分片的IP数据报。该字段的值只是一个由发送方递增的计数器。反过来，接收方知道如何对传入的片段进行排序。 flags字段定义了数据报的各种控制标志。具体来说，发送方可以指定数据报是否允许分片，是否是最后一个分片，或者是否还有更多分片传入。 片段偏移字段frag_offset指示片段在数据报中的位置。当然，第一个数据报的索引设置为 0。 ttl是一个常见属性，数据报的生命周期。它通常由原始发送方设置为 64，每个接收方都会将该计数器减 1。当它达到零时，数据报将被丢弃，并且可能会回复一条 ICMP 消息以指示错误。 该proto字段为数据报提供了在其有效负载中携带其他协议的固有能力。该字段通常包含 16 (UDP) 或 6 (TCP) 等值，仅用于向接收方传达实际数据的类型。 报头校验和字段csum，用于验证 IP 报头的完整性。 最后，saddr和daddr字段分别指示数据报的源地址和目标地址。 Internet Checksum 互联网校验和字段用于检查 IP 数据报的完整性。算法的实际代码如下： 12345678910111213141516171819202122232425262728293031323334uint32_t sum_every_16bits(void *addr, int count)&#123; register uint32_t sum = 0; uint16_t * ptr = addr; while( count &gt; 1 ) &#123; /* This is the inner loop */ sum += * ptr++; count -= 2; &#125; /* Add left-over byte, if any */ if( count &gt; 0 ) sum += * (uint8_t *) ptr; return sum;&#125;uint16_t checksum(void *addr, int count, int start_sum)&#123; /* Compute Internet Checksum for &quot;count&quot; bytes * beginning at location &quot;addr&quot;. * Taken from https://tools.ietf.org/html/rfc1071 */ uint32_t sum = start_sum; sum += sum_every_16bits(addr, count); /* Fold 32-bit sum to 16 bits */ while (sum&gt;&gt;16) sum = (sum &amp; 0xffff) + (sum &gt;&gt; 16); return ~sum;&#125; sum_every_16bits 函数： 参数 void *addr 是指向内存地址的指针，表示数据的起始地址。 参数 int count 是要计算校验和的数据字节数。 函数使用指针 ptr 迭代访问数据，每次累加两个字节的值到 sum 中，直到处理完所有的字节。 如果数据字节数是奇数，最后一个字节单独累加。 返回一个 32 位整数，表示所有 16 位字的和。 checksum 函数： 参数 void *addr 是数据的起始地址。 参数 int count 是要计算校验和的数据字节数。 参数 int start_sum 是初始的校验和值。 函数调用 sum_every_16bits 函数计算数据的 16 位字的和，然后将其加到初始校验和值 start_sum 中。 然后，使用一个循环将 32 位的和折叠为 16 位，直到和不再超过 16 位。 最后，返回计算得到的校验和的一位补码。 这些函数的目的是按照 RFC1071 中描述的方式计算 Internet 校验和。计算校验和的过程涉及将所有 16 位字相加，然后将 32 位和折叠为 16 位。最终，返回的值是校验和的一位补码。 Internet Control Message Protocol version 4 由于互联网协议缺乏可靠性机制，因此需要某种方式来通知通信方可能的错误情况。因此，互联网控制消息协议(ICMP) 用于网络中的诊断措施。 Header ICMP 标头驻留在相应 IP 数据包的有效负载中。ICMPv4报头的结构如下： 123456struct icmp_v4 &#123; uint8_t type; uint8_t code; uint16_t csum; uint8_t data[];&#125; __attribute__((packed)); type字段传达消息的目的。类型字段保留了42个不同的值，但常用的只有大约8个。在我们的实现中，使用类型 0（Echo Reply）、3（Destination Unreachable）和 8（Echo request）。 code字段进一步描述了消息的含义。例如，当类型为 3（目的地不可达）时，代码字段暗示原因。一个常见错误是当数据包无法路由到网络时：始发主机很可能会收到类型为 3 且代码为 0（网络不可达）的 ICMP 消息。 csum字段与IPv4报头中的校验和字段相同，并且可以使用相同的算法来计算它。在 ICMPv4 中，校验和是端到端的，这意味着计算校验和时还包括有效负载。 消息及其处理 实际的 ICMP 负载由查询/信息消息和错误消息组成。首先，我们来看看回显请求/回复消息，在网络中通常称为“ping”： 12345struct icmp_v4_echo &#123; uint16_t id; uint16_t seq; uint8_t data[];&#125; __attribute__((packed)); 消息格式紧凑。该字段id由发送主机设置，以确定回显应答要发送给哪个进程。例如，可以在此字段中设置进程 ID。 该字段seq是回显的序列号，它只是一个从零开始的数字，每当形成新的回显请求时就加一。这用于检测回显消息在传输过程中是否消失或重新排序。 该data字段是可选的，但通常包含回显时间戳等信息。然后可以使用它来估计主机之间的往返时间。 ICMPv4 错误消息Destination Unreachable具有以下格式： 123456struct icmp_v4_dst_unreachable &#123; uint8_t unused; uint8_t len; uint16_t var; uint8_t data[];&#125; __attribute__((packed)); 首先，第一个八位字节未使用。然后，长度字段（len field）表示原始数据报的长度，以IPv4的4字节单位计算。2字节字段var的值取决于ICMP代码。最后，导致目标不可达状态的原始IP数据包的尽可能多的部分被放置到数据字段中。 TCP 基础知识和握手 可靠性机制 可靠发送数据的问题看似表面，但涉及到其实际的实现。主要是，在数据报式网络中的错误修复方面出现了几个问题： 发送方应等待接收方确认多长时间？ 如果接收方处理数据的速度无法赶上发送数据的速度怎么办？ 如果中间的网络（例如路由器）无法像发送数据一样快速处理数据怎么办？ 在所有情况下，数据包交换网络的潜在危险都存在——来自接收方的确认可能在传输过程中被损坏甚至丢失，这使发送方陷入困境。 为了解决这些问题，可以使用多种机制。也许最常见的是滑动窗口技术，双方都对传输的数据进行记录。窗口数据被认为是连续的（就像数组的切片），并且当双方处理（并确认）数据时，窗口向前“滑动”： 123456789101112Left window edge Right window edge | | | | --------------------------------------------------------- ...| 3 | 4 | 5 | 6 | 7 |... --------------------------------------------------------- ^ ^ ^ ^ | \\ / | | \\ / | Sent and Window size: 3 Cannot be ACKed sent yet 使用这种滑动窗口的便利特性是它还减轻了流量控制的问题。当接收方处理数据的速度不能达到发送数据的速度时，就需要进行流量控制。在这种情况下，滑动窗口的大小将协商得较小，从而导致发送方的输出受到限制。 另一方面，拥塞控制有助于发送方和接收方之间的网络堆栈不发生拥塞。有两种通用方法：在显式版本中，协议有一个字段用于专门通知发送方有关拥塞状态的信息。在隐式版本中，发送方尝试猜测网络何时拥塞并应限制其输出。总体而言，拥塞控制是一个复杂的、反复出现的网络问题。 TCP 基础知识 TCP 中的底层机制比 UDP 和 IP 等其他协议涉及更多。TCP是面向连接的协议，这意味着首先在正好两端之间建立单播通信通道。这个连接是由双方主动处理的：建立连接（握手），告知对方数据的状态和可能出现的问题。 TCP 的另一个重要属性是它是一种流协议。与 UDP 不同，TCP 不保证应用程序在发送和接收数据时保持稳定的数据“块”。相反，TCP 实现必须缓冲数据，当数据包丢失、重新排序或损坏时，TCP 必须等待并组织缓冲区中的数据。只有当数据被认为是完整的时，TCP才可以将数据交给应用程序的套接字。 由于 TCP 将数据作为流进行操作，因此流中的“块”必须转换为 IP 可以承载的数据包。这称为打包，其中 TCP 标头包含流中当前索引的序列号。这还有一个方便的特性，即流可以分成许多可变大小的段，然后 TCP 知道如何重新打包它们。 与 IP 类似，TCP 也检查消息的完整性。这是通过与 IP 中相同的校验和算法实现的，但增加了细节。主要是，校验和是端到端的，这意味着标头和数据都包含在校验和中。此外，还包括根据 IP 标头构建的伪标头。 如果 TCP 实现接收到损坏的段，它会丢弃它们并且不会通知发送方。这个错误可以通过发送方设置的定时器来纠正，如果接收方从未确认过该报文段，则可以使用该定时器来重新传输该报文段。 TCP 也是一个全双工系统，这意味着流量可以同时在两个方向上流动。这意味着通信双方必须在内存中保持双向数据的排序。更深入地说，TCP 通过在其发送的段中包含对相反流量的确认来保留其流量足迹。 从本质上讲，数据流的排序是 TCP 的主要原理。然而，保持同步的问题并不是一个简单的问题。 TCP Header 接下来，我们将定义消息标头并描述其字段。TCP头看似简单，但是包含了很多关于通信状态的信息。 TCP 标头为 20 个八位位组，大小为： 123456789101112 0 15 31-----------------------------------------------------------------| source port | destination port |-----------------------------------------------------------------| sequence number |-----------------------------------------------------------------| acknowledgment number |-----------------------------------------------------------------| HL | rsvd |C|E|U|A|P|R|S|F| window size |-----------------------------------------------------------------| TCP checksum | urgent pointer |----------------------------------------------------------------- 源端口和目标端口字段用于建立来自和到主机的多个连接。也就是说，Berkeley 套接字是应用程序绑定到 TCP 网络堆栈的流行接口。通过端口，网络堆栈知道将流量定向到哪里。由于字段大小为 16 位，因此端口值范围为 0 到 65535。 由于流中的每个字节都有编号，因此序列号代表 TCP 段的窗口索引。握手时，它包含初始序列号(ISN)。 确认号包含发送方期望接收的下一个字节的窗口索引。握手后，必须始终填充 ACK 字段。 报头长度(HL) 字段以 32 位字表示报头的长度。 接下来，展示了几个标志。前 4 位 ( rsvd ) 未使用。 拥塞窗口降低©用于通知发送方降低了其发送速率。 ECN Echo (E) 通知发送方收到拥塞通知。 Urgent Pointer（U）指示该段包含优先级数据。 ACK (A) 字段用于传达 TCP 握手的状态。它在连接的剩余时间内保持开启状态。 PSH（P）用于指示接收方应尽快将数据“推送”到应用程序。 RST ® 重置 TCP 连接。 SYN (S)用于在初始握手时同步序列号。 FIN (F)表示发送方已完成数据发送。 window size字段用于通告窗口大小。换句话说，这是接收方愿意接受的字节数。由于它是 16 位字段，因此最大窗口大小为 65,535 字节。 TCP checksum字段用于验证 TCP 段的完整性。该算法与 Internet 协议相同，但输入段还包含 TCP 数据以及来自 IP 数据报的伪标头。 当设置 U 标志时，使用紧急指针。该指针指示紧急数据在流中的位置。 在可能的选项之后，接下来是实际数据。然而，该数据不是必需的。例如，握手仅通过 TCP 标头完成。 TCP握手 TCP连接通常经历以下阶段：连接建立（握手）、数据传输和连接关闭。下图描述了 TCP 通常的握手例程： 1234567891011TCP A TCP B 1. CLOSED LISTEN 2. SYN-SENT --&gt; &lt;SEQ=100&gt;&lt;CTL=SYN&gt; --&gt; SYN-RECEIVED 3. ESTABLISHED &lt;-- &lt;SEQ=300&gt;&lt;ACK=101&gt;&lt;CTL=SYN,ACK&gt; &lt;-- SYN-RECEIVED 4. ESTABLISHED --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt; --&gt; ESTABLISHED 5. ESTABLISHED --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt;&lt;DATA&gt; --&gt; ESTABLISHED 主机 A 的套接字处于关闭状态，这意味着它不接受连接。相反，主机 B 绑定到特定端口的套接字正在侦听新连接。 主机 A 打算发起与主机 B 的连接。因此，A 制作了一个 TCP 段，该段设置了 SYN 标志，并且序列字段填充了值 (100)。 主机 B 使用设置了 SYN 和 ACK 字段的 TCP 段进行响应，并通过向其加 1 来确认 A 的序列号 (ACK=101)。同样，B 生成序列号（300）。 3 次握手由连接请求发起者 (A) 的 ACK 完成。确认字段反映了主机接下来期望从另一端接收到的序列号。 数据开始流动，主要是双方都确认了对方的段号。 这是建立TCP连接的常见场景。然而，出现了几个问题： 初始序列号是如何选择的？ 如果双方同时请求彼此连接怎么办？ 如果路段延迟一段时间或无限期怎么办？ 初始序列号(ISN) 由通信双方在第一次联系时独立选择。由于它是识别连接的关键部分，因此必须选择它，使其最有可能是唯一的且不易被猜测。事实上，在TCP 序列号攻击中，攻击者可以复制 TCP 连接并有效地将数据传送给目标，冒充受信任的主机。 最初的规范建议 ISN 由每 4 微秒递增的计数器选择。然而，攻击者可以猜测到这一点。实际上，现代网络堆栈通过更复杂的方法生成 ISN。 两个端点收到对方的连接请求（SYN）的情况称为同时打开。这是通过 TCP 握手中的额外消息交换来解决的：双方都发送 ACK（不知道另一方也已完成），并且双方对请求进行 SYN-ACK。此后，数据传输开始。 最后，TCP 实现必须有一个计时器来知道何时放弃建立连接。尝试重新建立连接，通常采用指数退避，但一旦达到最大重试次数或时间阈值，连接将被视为不存在。 TCP 选项 TCP 标头段中的最后一个字段是为可能的 TCP 选项保留的。最初的规范提供了三个选项，但后来的规范添加了更多选项。接下来，我们将看看最常见的选项。 最大段大小(MSS) 选项告知 TCP 实现愿意接收的最大 TCP 段大小。IPv4 中的典型值为 1460 字节。 选择性确认(SACK) 选项优化了许多数据包在传输过程中丢失且接收器的数据窗口充满“漏洞”的情况。为了弥补由此造成的吞吐量下降，TCP 实现可以通过 SACK 通知发送方它未收到的特定数据包。因此，发送方以比累积确认方案更直接的方式接收有关数据状态的信息。 窗口缩放选项增加了有限的 16 位窗口大小。也就是说，如果双方在握手段中都包含此选项，则窗口大小将乘以此比例。拥有更大的窗口大小对于批量数据传输非常重要。 时间戳选项允许发送方将时间戳放入 TCP 分段中，然后可用于计算每个 ACK 分段的 RTT。然后可以使用该信息来计算 TCP 重传超时。 TCP Data Flow &amp; Socket API Transmission Control Block 通过定义记录数据流状态的变量来开始讨论 TCP 数据管理是有益的。 简而言之，TCP 必须跟踪它已发送和接收确认的数据序列。为了实现这一点，为每个打开的连接初始化一个称为传输控制块（TCB）的数据结构。 传出（发送）端的变量是： 123456789Send Sequence Variables SND.UNA - send unacknowledged SND.NXT - send next SND.WND - send window SND.UP - send urgent pointer SND.WL1 - segment sequence number used for last window update SND.WL2 - segment acknowledgment number used for last window update ISS - initial send sequence number 依次，为接收方记录以下数据： 123456Receive Sequence Variables RCV.NXT - receive next RCV.WND - receive window RCV.UP - receive urgent pointer IRS - initial receive sequence number 此外，当前正在处理的段的辅助变量定义如下： 12345678Current Segment Variables SEG.SEQ - segment sequence number SEG.ACK - segment acknowledgment number SEG.LEN - segment length SEG.WND - segment window SEG.UP - segment urgent pointer SEG.PRC - segment precedence value 这些变量共同构成了给定连接的大部分 TCP 控制逻辑。 TCP数据通讯 一旦建立连接，就会开始显式处理数据流。TCB 中的三个变量对于状态的基本跟踪非常重要： SND.NXT- 发件人将跟踪要在SND.NXT中使用的下一个序列号。 RCV.NXT- 接收方记录下一个期望的序列号RCV.NXT。 SND.UNA- 发送方将在SND.UNA 中记录最早的未确认序列号。 在足够的时间段内，当TCP管理数据通信且没有传输发生时，这三个变量将相等。 例如，当 A 决定向 B 发送带有数据的段时，以下事件发生： TCP A发送一个段并在其自己的记录（TCB）中推进SND.NXT。 TCB B接收该段并通过推进RCV.NXT进行确认，并发送一个ACK。 TCB A接收ACK并推进SND.UNA。 这些变量推进的数量是段中数据的长度。这是TCP在传输数据上的控制逻辑基础。 TCP 连接终止 关闭 TCP 连接同样是一个复杂的操作，可以强制终止（RST）或通过双方协议（FIN）完成。 基本场景如下： 主动关闭者发送FIN 报文段。 被动关闭者通过发送 ACK 段来确认这一点。 被动关闭器者开始自己的关闭操作（当它没有更多数据要发送时）并有效地成为主动关闭者。 一旦双方都向对方发送了 FIN 并且向两个方向都确认了它们，连接就会关闭。 显然，TCP 连接的关闭需要四个段，而 TCP 连接建立（三次握手）则需要三个段。 此外，TCP 是一种双向协议，因此可以让另一端宣布它没有更多数据要发送，但仍保持在线状态以接收传入数据。这称为TCP 半关闭。 数据包交换网络的不可靠特性给连接终止带来了额外的复杂性 - FIN 段可能会消失或永远不会被有意发送，从而使连接处于尴尬的状态。例如，在 Linux 中，内核参数tcp_fin_timeout控制 TCP 在强制关闭连接之前等待最终 FIN 数据包的秒数。这违反了规范，但却是预防拒绝服务 (DoS) 所必需的。 中止连接涉及设置了 RST 标志的段。发生重置的原因有很多，但常见的原因有： 对不存在的端口或接口的连接请求 另一个 TCP 已崩溃并最终处于不同步连接状态 尝试干扰现有连接 因此，TCP 数据传输的最佳路径永远不会涉及 RST 段。 套接字API 为了能够利用网络堆栈，必须为应用程序提供某种接口。BSD Socket API是最著名的一种，它起源于 1983 年的 4.2BSD UNIX 版本。Linux 中的 Socket API 与 BSD Socket API 兼容。 socket(2)通过调用并将套接字类型和协议作为参数传递，可以从网络堆栈中保留套接字。通用值为AF_INET和SOCK_STREAM。这将默认为 TCP-over-IPv4 套接字。 成功从网络堆栈保留 TCP 套接字后，它将连接到远程端点。这是connect(2)使用的地方，调用它将启动 TCP 握手。 从那时起，我们就可以从套接字write(2)和read(2)获取数据了。 网络堆栈将处理 TCP 流中数据的排队、重传、错误检查和重组。对于应用程序来说，TCP的内部行为大多是不透明的。应用程序唯一可以依赖的是 TCP 已确认发送和接收数据流的责任，并且它将通过套接字 API 通知应用程序意外行为。 socket()： 创建一个套接字，返回一个套接字描述符。 1int socket(int domain, int type, int protocol); bind()： 将套接字与特定地址（IP地址和端口号）绑定。 1int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen); listen()： 启动服务端等待客户端连接请求的过程。 1int listen(int sockfd, int backlog); accept()： 接受客户端的连接请求，返回一个新的套接字用于与客户端通信。 1int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); connect()： 发起与远程服务器的连接。 1int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen); send() 和 recv()： 用于发送和接收数据。 12size_t send(int sockfd, const void *buf, size_t len, int flags);size_t recv(int sockfd, void *buf, size_t len, int flags); TCP 重传 自动重复请求 许多可靠协议的基础是自动重复请求 (ARQ)的概念。 在 ARQ 中，接收方发送其已接收数据的确认，而发送方则重新传输其从未收到确认的数据。 正如我们所讨论的，TCP 将传输数据的序列号保存在内存中并以确认进行响应。传输的数据被放入重传队列中，并且启动与数据相关的定时器。如果在定时器超时之前没有收到数据序列的确认，则会发生重传。 TCP重传 当TCP传输包含数据的报文段时，它会将副本放入重传队列中并启动计时器；当收到该数据的确认时，该段将从队列中删除。如果在定时器超时之前没有收到确认，则重新传输该段。 然而，原来的重传超时计算公式被认为不适用于不同的网络环境,最新的规范化规范可以从 RFC6298中找到。 基本算法相对简单。对于给定的 TCP 发送方，定义状态变量来计算超时： srtt是平滑的往返时间，用于平均分段的往返时间 (RTT) rttvar保存往返时间变化 rto最终保存重传超时，例如以毫秒为单位 简而言之，srtt 充当连续 RTT 的低通滤波器。由于 RTT 可能存在较大的变化，rttvar 用于检测这些变化并防止它们影响平均函数。此外，假设时钟的粒度为 G 秒。 如RFC6298中所述，计算步骤如下： 在第一次 RTT 测量之前： 1rto = 1000ms 在第一个 RTT 测量R上： 123srtt = Rrttvar = R/2rto = srtt + max(G, 4*rttvar) 关于后续测量： 12345alpha = 0.125beta = 0.25rttvar = (1 - beta) * rttvar + beta * abs(srtt - r)srtt = (1 - alpha) * srtt + alpha * rrto = srtt + max(g, 4*rttvar) 计算后rto，如果小于1秒，则四舍五入为1秒。可以提供最大数量，但必须至少为 60 秒 TCP 实现的时钟粒度传统上被估计为相当高，范围从 500 毫秒到 1 秒。然而，像 Linux 这样的现代系统使用的时钟粒度为 1 毫秒。 需要注意的一件事是， 建议 RTO 始终至少为 1 秒。这是为了防止虚假重传，即当某个数据段重传过快时，会导致网络拥塞。在实践中，许多实现选择亚秒级的四舍五入：Linux 使用 200 毫秒。 Karn’s Algorithm Karn 算法是一种防止 RTT 测量给出错误结果的强制算法。它只是指出不应为重传的数据包获取 RTT 样本。 换句话说，TCP 发送方会跟踪其发送的分段是否为重传，并跳过这些确认的 RTT 例程。这是有道理的，因为否则发送方无法区分原始段和重传段之间的确认。 然而，当使用时间戳 TCP 选项时，可以测量每个 ACK 段的 RTT。 管理 RTO 定时器 管理重传定时器相对简单。RFC6298推荐以下算法： 当发送数据段且 RTO 定时器未运行时，将其激活，超时值为rto 当所有未完成的数据段均被确认后，关闭 RTO 定时器 当收到新数据的 ACK 时，用以下值重新启动 RTO 定时器：rto 当 RTO 定时器到期时： 重传最早的未确认段 将 RTO 定时器退后 2 倍，即 ( rto = rto * 2) 启动RTO定时器 此外，当 RTO 值出现回退并且成功进行后续测量时，RTO 值可能会急剧缩小。在进行退避并等待确认时，TCP 实现可能会清除 srtt 和 rttvar。 请求重传 TCP 通常不仅仅依靠 TCP 发送方的计时器来修复丢失的数据包。接收方还可以通知发送方需要重传分段。 重复确认是一种对无序段进行确认的算法，但按最新有序段的序列号进行确认。在三个重复确认之后，TCP 发送方应该意识到它需要重新传输由重复确认通告的段。 此外，选择性确认（SACK）是重复确认的更复杂版本。它是一个 TCP 选项，接收器能够将接收到的序列编码到其确认中。然后发送者立即注意到任何丢失的数据段并重新发送它们。 代码走读 代码结构如下 先看下makefile文件，看看程序是怎么编译出来的？ 123456789101112131415161718192021222324252627282930313233343536CPPFLAGS = -I include -Wall -Werror -pthreadsrc = $(wildcard src/*.c)obj = $(patsubst src/%.c, build/%.o, $(src))headers = $(wildcard include/*.h)apps = apps/curl/curllvl-ip: $(obj) $(CC) $(CFLAGS) $(CPPFLAGS) $(obj) -o lvl-ip @echo @echo &quot;lvl-ip needs CAP_NET_ADMIN:&quot; sudo setcap cap_setpcap,cap_net_admin=ep lvl-ipbuild/%.o: src/%.c $&#123;headers&#125; $(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt; -o $@debug: CFLAGS+= -DDEBUG_SOCKET -DDEBUG_TCP -g -fsanitize=threaddebug: lvl-ipapps: $(apps) $(MAKE) -C tools $(MAKE) -C apps/curl $(MAKE) -C apps/curl-pollall: lvl-ip appstest: debug apps @echo @echo &quot;Networking capabilites are required for test dependencies:&quot; which arping | sudo xargs setcap cap_net_raw=ep which tc | sudo xargs setcap cap_net_admin=ep @echo cd tests &amp;&amp; ./test-run-allclean: rm build/*.o lvl-ip CPPFLAGS 定义了一些编译选项，包括头文件目录、警告标志等。 src 使用wildcard函数列举了src目录下所有的.c文件。 obj 使用patsubst函数将src中的.c文件路径转换为build中的.o文件路径。 headers 列举了include目录下所有的头文件。 apps 定义了一个变量，包含了一个名为curl的应用程序。 lvl-ip 是默认目标规则，依赖于$(obj)。它编译了所有的.o文件并生成可执行文件lvl-ip，然后使用setcap命令赋予了特定的权限。 build/%.o 规则定义了如何将.c文件编译成.o文件。 debug 目标规则用于构建带有调试信息和线程检测的lvl-ip。 apps 目标规则用于构建额外的应用程序。 all 是一个依赖于lvl-ip和apps的目标规则。 test 目标规则用于运行测试，要求一些网络权限。 clean 规则用于清理生成的.o文件和可执行文件。 函数从main函数入口， 在链接阶段，链接器将编译生成的目标文件（例如，.o文件）合并成一个可执行文件。在这个过程中，链接器会解析main函数的地址，将其设置为程序的入口点。 123456789101112131415int main(int argc, char** argv)&#123; /*1. argc（Argument Count）： 这是一个整数，表示命令行参数的数量（argument count）。它表示在运行程序时通过命令行 输入的参数的个数。`argc` 至少为 1，因为程序的名称通常被认为是一个参数。 2. argv（Argument Vector）：这是一个字符指针数组，其中每个指针指向一个字符串，表示实际的命令行参数（argument ` vector）。`argv[0]` 是程序的名称，`argv[1]` 到 `argv[argc-1]` 是通过命令行输入的其他参数。每个参数都以字符串的形式表 示。*/ parse_cli(argc, argv);//该函数可能用于解析命令行参数 argc 和 argv，以便你的程序可以接受和处理命令行输入 init_signals();//该函数可能用于初始化信号处理程序 init_stack();//该函数可能用于初始化程序的堆栈 init_security();//该函数可能用于执行一些与程序安全性相关的初始化操作 run_threads();//启动线程 wait_for_threads();//该函数可能用于等待所有线程执行完毕或达到某种状态 free_stack();//该函数可能用于释放之前初始化的堆栈或相关资源&#125; 12345678static void init_stack()&#123; tun_init(); netdev_init(); route_init(); arp_init(); tcp_init();&#125; tun_init(): 这个函数用于初始化TUN（网络隧道）设备。TUN设备是一种虚拟网络设备，用于在用户空间和内核空间之间传递网络数据包。 netdev_init(): 这个函数用于初始化网络设备。网络设备是计算机网络中的硬件设备或虚拟设备，用于进行数据包的输入和输出。 route_init(): 这个函数用于初始化路由表。路由表用于确定数据包从源地址到目标地址的传输路径。 arp_init(): 这个函数用于初始化ARP（地址解析协议）。ARP协议用于将IP地址映射到物理硬件地址（如MAC地址）。 tcp_init(): 这个函数用于初始化TCP协议。TCP是一种可靠的、面向连接的协议，用于在计算机网络中进行可靠的数据传输。 1234567static void run_threads()&#123; create_thread(THREAD_CORE, netdev_rx_loop);// 创建并启动网络设备接收循环的线程 create_thread(THREAD_TIMERS, timers_start); // 创建并启动定时器的线程 create_thread(THREAD_IPC, start_ipc_listener); // 创建并启动 IPC 监听器的线程 create_thread(THREAD_SIGNAL, stop_stack_handler);// 创建并启动处理停止事件的线程&#125; 这段代码定义了一个名为 create_thread 的函数，用于创建线程并启动执行指定的函数。以下是对代码的主要解释： 1234567static void create_thread(pthread_t id, void *(*func) (void *))&#123; // 使用 pthread_create 函数创建线程 if (pthread_create(&amp;threads[id], NULL, func, NULL) != 0) &#123; // 如果创建线程失败，输出错误信息 print_err(&quot;Could not create core thread\\n&quot;); &#125; } pthread_create 函数： 这是 POSIX 线程库中用于创建线程的函数。它接受四个参数： &amp;threads[id]：指向 pthread_t 类型的变量，用于存储新创建线程的标识符。 NULL：线程的属性，这里设置为默认属性。 func：指向线程执行的函数的指针。 NULL：传递给线程执行函数的参数，这里设置为 NULL。 print_err 函数： 如果创建线程失败，调用 print_err 函数输出错误信息。 这个函数的作用是通过调用 pthread_create 创建线程，并将线程的标识符存储在全局数组 threads 的指定位置。如果创建线程失败，输出错误信息。这样的设计通常用于并发执行多个任务，提高程序的性能和响应性。","categories":[{"name":"编程","slug":"编程","permalink":"https://blackforest1990.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"how to make","slug":"how-to-make","permalink":"https://blackforest1990.github.io/tags/how-to-make/"}]},{"title":"万历十五年读书笔记","slug":"万历十五年读书笔记","date":"2024-01-09T09:42:32.000Z","updated":"2024-01-10T04:15:14.998Z","comments":true,"path":"2024/01/09/万历十五年读书笔记/","link":"","permalink":"https://blackforest1990.github.io/2024/01/09/%E4%B8%87%E5%8E%86%E5%8D%81%E4%BA%94%E5%B9%B4%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","excerpt":"","text":"​ 万历十五年，黄公仁宇之大作，英文名为“1587, A year of No Significance”, 在历史上1587实在为寡淡的一年，但是通过这一年万历皇帝，申时行，张居正，海瑞，戚继光等人的遭遇，阐述出明帝国在结构系统上的硬伤，无论如何的天纵奇才都不可能避免走向衰落。 ​ 明朝的衰败，实为制度的衰败，名为帝国，在本质上无非是数不清的农村合并成的一个集合体，礼仪和道德代替了法律，对于违法的行为作掩饰则被认为忠厚识大体。各个机构之间的联系，从来没有可资遵守的成文条例，所以造成行政效率低下，整个国家不能做到如臂指使的运转。当一个人口众多的国家，各人行动全凭儒家简单粗浅而又无法固定的原则所限制，而法律又缺乏创造性，则其社会发展的程度，必然受到限制。即便是宗旨善良，也不能补助技术之不及。 万历皇帝 ​ 万历皇帝朱翊（yì）钧（jūn）为国家的最高元首，本朝在开国之初曾经设立过丞相的职位，经过一个时期，内阁大学士在某种程度上就行使了丞相的职权。这种以阁臣代行相职的制度，来源于开国之君为了巩固政权而做出的苦心设计，目的是使皇权不被分割，也不致为旁人取代。大学士原来属于文学侍从之臣。由于殿试时文理出众，名列前茅，就可以进入翰林院。翰林几经升转，其中最突出的人物就可以被任命为大学士，供职于文渊阁。由于文渊阁是皇帝的文书机构，和皇帝最为接近，在不设丞相的情况下，这个机构的职权就由于处理政事的需要而越来越大，大学士一职也变成了皇帝的秘书而兼顾问，张居正名为首辅，或称元辅，其他大学士的任命则出于他的推荐。大学士之中有了主次之分，造成了今后朝臣之间的更加复杂的纠纷局面。内阁制度，破坏了皇帝-群臣-相的体系（皇帝负责天命和军事，宰相负责政务和官员任命），造成了文官体系的无比强大。万历皇帝在励精图治以后，发现了文官体系的不可战胜，从此不在做反抗，让帝国慢慢腐烂下去。 张居正 ​ 洪武皇帝两百年以前创建本朝，并确立了整套的政治和经济制度，其主要的着眼点在于保存一个农业社会的俭朴风气。当时全国的文官仅有八千人。所有办理文牍和事务的技术人员称之为“吏”，和文官属于两个不同的阶层，如泾渭之分明。官可以罚降为吏，吏却很少能上升为官。这些吏的薪给极为微薄，仅足以供一家糊。农村的组织方式是以每一乡村为单位，构成一个近于自治的集团，按照中央政府的规定订立自己的乡约。一村内设“申明亭”和“旌善亭”各一座，前者为村中耆老仲裁产业、婚姻、争斗等纠纷的场所，后者则用以表扬村民中为人所钦佩的善行。洪武皇帝所推行的农村政策及一整套的措施，对本朝今后的历史，影响至为深远。其最显著的后果是，在全国的广大农村中遏止了法制的成长发育，而以抽象的道德取代了法律。上自官僚下至村民，其判断是非的标准是“善”和“恶”，而不是“合法”或“非法”。在财政制度上，政府规定了按面积征收田赋，除浙西（当时的浙西包括今日的苏南）而外，其他地区的税率都比较低。征收不分贫富，其限制富户的办法即上述的服役。征收不分贫富，其限制富户的办法为服役。这种服役名目繁多，而且按累进税的原则分派，即家室愈是殷富，其负担也愈是繁重。这种以赢补亏而不由上级机关总揽收支以节约交通、通讯、簿记、仓库管理等各项后勤支出的财政制度贯彻于始终。全国满布着无数的短途运输线，缺乏统一的组织和管理。到后来税收已由实物折为现银。这种原始的方式也由于积重难返，而且中级机构又缺乏组织，而无法完全改变。显而易见，这种财政制度的弊病在于缺乏弹性，不能适应环境而调整。各府县的税率、税额长期凝固，即使耕地的收获量增加，其利益也为业主和高利贷者分润，于国库则无所裨益。 ​ 当张居正出任首辅的时候，本朝已经有了两百年的历史。开国时的理想和所提倡的风气与今天的实际距离已经愈来愈远了。很多问题，按理说应该运用组织上的原则予以解决，但事实上无法办到，只能代之以局部的人事调整。这种积弊的根源在于财政的安排。在开国之初，政府厘定各种制度，其依据的原则是“四书”上的教条，认为官员们应当过简单朴素的生活是万古不磨的真理。从这种观念出发而组成的文官集团，是一个庞大无比的组织，在中央控制下既没有重点，也没有弹性，更谈不上具有随着形势发展而作调整的能力。各种技术力量，诸如交通通讯、分析统计、调查研究、控制金融、发展生产等等则更为缺乏。一个必然的后果，即政府对民间的经济发展或衰退，往往感到隔膜，因之税收和预算不能随之而增加或减缩。财政上死板、混乱与缺乏控制，给予官员的俸禄又微薄到不合实际，官员们要求取得额外收入也就是不可避免的了。以张居正的精明干练，他没有能解决这个问题。他的十年首辅生涯，仅仅刚把问题看清楚。他的一套改革办法使文官们感受到极大的压力而不能成功，而且招致了死后的被清算。 申时行 ​ 申时行为皇帝的老师，张居正死后，申时行担任首辅，接替他的位置，他胸中富有积蓄，但是不近悬崖，不树异帜，在张居正死后，他承认张居正的过错，但并不借此夸大前任的过失，作为自己执政的资本。施政的要诀，仍不外以抽象的方针为主，以道德为一切事业的根基。朝廷最大的任务是促进文官之间的互相信赖与和谐。除非把全部文官罢免，而代之以不同的组织和不同的原则，身为首辅的人只能和文官合作，按照他们的共同意志办事。申时行没有忽略文官的双重性格：即虽称公仆，实系主人；有阳则有阴。他必须恰如其分地处理此中矛盾。时势要求申时行充当和事佬，他就担任这样角色。他不得不把目标降低。他所说的“使不肖者犹知忌惮，而贤者有所依归”，就表现了他调和这阴阳两极的方针。他无意于鼓励不法，但也不能对操守过于认真。他欣赏自己“从中调剂，就事匡维”这一处世和执政的原则，对待皇帝的办法则是“显谏者不若潜移为妙”，因为这种办法既对皇帝的权威无损，而臣下的目的又可以达到。 海瑞 ​ 和很多同僚不同，海瑞不能相信治国的根本大计是在上层悬挂一个抽象的、至美至善的道德标准，而责成下面的人在可能范围内照办，行不通就打折扣。而他的尊重法律，乃是按照规定的最高限度执行。 海瑞充分重视法律的作用并且执法不阿，但是作为一个在圣经贤传培养下成长的文官，他又始终重视伦理道德的指导作用： 凡讼之可疑者，与其屈兄，宁屈其弟；与其屈叔伯，宁屈其侄。与其屈贫民，宁屈富民；与其屈愚直，宁屈刁顽。事在争产业，与其屈小民，宁屈乡宦，以救弊也。事在争言貌，与其屈乡宦，宁屈小民，以存体也。 用这样的精神来执行法律，确实与“四书”的训示相符合。可是他出任文官并在公庭判案，上距“四书”的写作已经两千年，距本朝的开国也已近两百年。这一段有关司法的建议恰恰暴露了这个帝国在制度上长期存在的困难：以熟读诗书的文人治理农民，他们不可能改进这个司法制度，更谈不上保障人权。法律的解释和执行离不开传统的伦理，组织上也没有对付复杂的因素和多元关系的能力。 戚继光 ​ 武将领兵作战，和文官集团的施政原则在根本上是不能相容的。当社会和经济的发展不能平衡，冲突激化，以政治手段调剂无效，通常就会导致战争。有时候严重的天灾造成大面积的饥荒，百姓面对死亡的威胁，也会铤而走险，诉诸武力。但是我们帝国的文官，则一贯以保持各方面的平衡作为施政的前提，如果事情弄到动用武力，对他们来说就是失败的象征。他们具有一种牢不可破的观念，即上自国家，下至个人，不能把力量作为权威。如果一个地区有什么特殊的经济利益，那么就应当加以压抑，而不是提倡。至于天灾足以引起战争，则尤为无知妄说，因为从道德观念来说，天下的事物无不可以共同分配，灾民的暴动乃是小人犯上作乱的劣根性使然。 ​ 在维持军队给养的问题上，同样表现了帝国政府重文轻武的风气。让军人自己组织和管理后方勤务，根本不能考虑；即使是在文官管辖之下，把仓库的地点按照战略需要来作适当的配置，也被看作有背于平衡施政的原则。述种风气还使军人退伍以后不能得到正常的社会地位。本朝治理农民的根本方针是保持他们的淳朴无知，一个士兵退伍还乡，就等于增加一个无业游民，因为他在军队里所学到的技术和养成的起居习惯，已经难于再度适应农村的生活，事情的复杂性就会因之而增加。军官退伍以后所引起的问题更为严重。在别的国家里，一个退伍军官通常都受到应有的尊敬，如果担任民政职务，他的管理经验也能保证他胜任愉快。然而事情适得其反，我们的军官在长期训练中所培养的严格和精确，退伍以后竟毫无用武之地。他会发现在军队以外，人们所重视的是安详的仪表、华丽的文辞、口若悬河的辩才以及圆通无碍的机智。 ​ 也许是有鉴于唐朝藩镇的跋扈，本朝从洪武开始，就具有这重文轻武的趋向。大约经过了一百年，文官集团进入了成熟的阶段，他们的社会地位上升到历史上的最高点；换句话说，也就是武官的社会地位下降到历史上的最低点。这种畸形的出现，原因在于本朝的政治组织为一元化，一元化的思想基础则是两千年来的孔孟之道。如果让军队保持独立的、严格的组织，和文官集团分庭抗礼，这一元化的统治就不可能如所预期地成长、发展，以至于登峰造极。这种制度既经固定，将领们即使出生入死，屡建奇功，其社会影响，也未必抵得上一篇精彩的大块文章。这种制度和风气所造成的严重后果早已被事实所证明。 ​ 面对这样令人焦虑的局面，戚继光的任务决不仅止于单纯地击败倭寇。他首先要组织一支新型的军队，从他的军事著作《纪效新书》中可以看到如何有条不紊地实施他的建军方案：宣布招兵的办法，规定月饷的数字，拟订分配列兵职务的原则，明确官兵的职责，设计队、哨、局的组织，统一武器的规格，颁发旗帜金鼓这一类通讯器材，等等。他所制定的赏罚原则并不完全决定于战斗的胜负。即使大败，有功者仍然要给予奖赏；相反，即使大胜，作战不力和临阵脱逃者仍然要受到处罚。 ​ 在戚继光以前，在军队中受到重视的是个人的武艺，等到他们被有组织的倭寇屡屡击溃以后，当局者才觉悟到一次战斗的成败并非完全决定于个人武艺。戚继光对一个步兵班作了如下的配置：队长一名，火伕一名，战士十名。这这种配置由于左右对称而名为“鸳鸯阵”。右边持方形藤牌的士兵，其主要的任务在于保持既得的位置，稳定本队的阵脚。左边持圆形藤牌的士兵，则要匍匐前进，并在牌后掷出标枪，引诱敌兵离开有利的防御的位置。引诱如果成功，后面的两个士兵则以狼筅把敌人扫倒于地，然后让手持长枪的伙伴一跃而上把敌人刺死戳伤。最后两个手持镋钯的士兵则负责保护本队的后方，警戒侧翼，必要时还可以支援前面的伙伴，构成第二线的攻击力量。可以明显地看出，这一个十二人的步兵班乃是一个有机的集体。预定的战术取得成功，全靠各个士兵分工合作，很少有个人突出的机会。正由于如此，主将戚继光才不惮其烦地再三申明全队人员密切配合的重要性，并以一体赏罚来作纪律上的保证。 ​ 戚继光的方案比较现实。他没有去触动整个的国家体制，而只是脚踏实地，做他职责范围内力所能及的事。他的部队从来没有一个后勤司令，也没有一个固定的军需处和兵工署。在整个国家机构之中，也没有委派过向他的部队作后勤供应的专职人员。他部队中的装备和武器，来源于各府县的分散供应。这种情况自然不能保持武器的质量。戚继光的募兵原则是只收农民，而不收城市居民。他认为来自市井的人都属于狡猾无赖之徒。这种观点，虽然有它的片面性，但揆诸实际，在城市中有固定职业的人是极少自愿从军的。士兵为社会所普遍轻视，其军饷也相当微薄，城市中的应募者绝大多数只是把兵营当作解决食宿的救济所，一有机会就想另谋高就。戚继光的求实精神还表现于使革新不与传统距离过远，更不大事声张。他的部队保留了古老而朴素的农村作风，有时也和卫所内来自军户的部队并肩作战。他们日常的军饷，大体和在农村中充当短工的收入相等，但另设重赏以鼓励士气，一个敌军的头颅，赏额高达白银三十两。在作战中，总兵戚继光不惜初期接战的损失。经验告诉他，战斗无非是击破敌方的军事组织。如果以雷霆万钧之力，加于对方组织重点之上，则其配转运活的枢纽既被消灭，其全局必迅速瓦解。 ​ 在抗倭战争中功绩最为卓著的戚继光不是在理想上把事情做得至善至美的将领，而是最能适应环境以发挥他的天才的将领。他所以获得成功的要点，在于他清醒的现实感。他看清并适应了当时的政治，而把军事技术作为必要的辅助，这是在当时的环境里惟一可以被允许的方案。至于在一个以文人治国的农业国家之内，谁想要极端强调军事效率，提倡技术的发展，而导致军人和文官的并驾齐驱，哪怕他能举出无数动听的理由，在事实上也是绝对办不到的。 ​ 本书清晰透彻，明朝有如submarine sandwich，上面是一块长面包，大而无当，此乃文官集团；下面也是一块长面包，也没有有效的组织，此乃成千上万的农民。其中三个基本的组织原则，此即尊卑男女老幼，没有一个涉及经济及法治和人权，也没有一个可以改造利用。中国以道德代替法律，作者批评得很透彻。但西方的法律，也非道德的根源。比如西方所谓“自由”及“民主”，都是抽象的观念，务必透过每一个国家的地理及历史上的因素，才行得通。英国之民主，即不可能与日本之民主相同，而法国的自由也和美国的自由有差别。大历史的观点，亦即是从“技术上的角度看历史”(technical interpretation of history)。中国的革命，好像一个长隧道，须要一百零一年才可以通过。我们的生命纵长也难过九十九岁。以短衡长，只是我们个人对历史的反应，不足为大历史。将历史的基点推后三五百年才能摄入大历史的轮廓。","categories":[{"name":"历史","slug":"历史","permalink":"https://blackforest1990.github.io/categories/%E5%8E%86%E5%8F%B2/"}],"tags":[{"name":"黄仁宇","slug":"黄仁宇","permalink":"https://blackforest1990.github.io/tags/%E9%BB%84%E4%BB%81%E5%AE%87/"}]},{"title":"邓小平时代","slug":"邓小平时代","date":"2023-03-21T08:25:20.000Z","updated":"2024-01-09T05:14:10.942Z","comments":true,"path":"2023/03/21/邓小平时代/","link":"","permalink":"https://blackforest1990.github.io/2023/03/21/%E9%82%93%E5%B0%8F%E5%B9%B3%E6%97%B6%E4%BB%A3/","excerpt":"","text":"傅高义这本书，基本上站在客观角度观察邓小平，说明了邓在各个阶段的人生经历和施政要领。 邓是一名忠诚的共产党员和民族主义者，贯穿整个人生他都做到了这一点，他在法国留学，但是由于时局突变，没有机会学习，进行了革命运动，但终其一生他都对于知识和科学技术保留了尊重，明白科技为第一生产力。在毛主政时期，虽然三上三下，屡受打压，但是他没有让打压阻碍了工作，仍然宠辱不惊的完成了外交任务，同时恪守原则，在路线问题上不退后一步，但同时因为与毛的私交没有被开除党籍，仍然保留了希望；邓在施政上以稳定为第一原则，对于文革没有清算，保存了党和政权的威严，在经济发展上，摸着石头过河，有问题先去实践，看看效果，再决定全国是否推广。坚持改革开放不动摇，由地方去影响北京。在学潮问题中，以强悍的手腕维持了稳定，同时积极跟美国沟通，后面虽然遭受了制裁但事情仍有余地，邓的治国，让中国迅速拜托了阶级斗争，封印了文革的伤痛，发展壮大了起来，他始终保持客观与强悍，信奉精英治国，维持了中国的稳定。","categories":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://blackforest1990.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"人物传记","slug":"人物传记","permalink":"https://blackforest1990.github.io/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"}]}],"categories":[{"name":"历史","slug":"历史","permalink":"https://blackforest1990.github.io/categories/%E5%8E%86%E5%8F%B2/"},{"name":"经验总结","slug":"经验总结","permalink":"https://blackforest1990.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"},{"name":"编程","slug":"编程","permalink":"https://blackforest1990.github.io/categories/%E7%BC%96%E7%A8%8B/"},{"name":"读书笔记","slug":"读书笔记","permalink":"https://blackforest1990.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://blackforest1990.github.io/tags/%E6%9D%82%E8%B0%88/"},{"name":"工作语言","slug":"工作语言","permalink":"https://blackforest1990.github.io/tags/%E5%B7%A5%E4%BD%9C%E8%AF%AD%E8%A8%80/"},{"name":"销售管理","slug":"销售管理","permalink":"https://blackforest1990.github.io/tags/%E9%94%80%E5%94%AE%E7%AE%A1%E7%90%86/"},{"name":"电信运营商","slug":"电信运营商","permalink":"https://blackforest1990.github.io/tags/%E7%94%B5%E4%BF%A1%E8%BF%90%E8%90%A5%E5%95%86/"},{"name":"与虎谋皮","slug":"与虎谋皮","permalink":"https://blackforest1990.github.io/tags/%E4%B8%8E%E8%99%8E%E8%B0%8B%E7%9A%AE/"},{"name":"云计算","slug":"云计算","permalink":"https://blackforest1990.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"how to make","slug":"how-to-make","permalink":"https://blackforest1990.github.io/tags/how-to-make/"},{"name":"黄仁宇","slug":"黄仁宇","permalink":"https://blackforest1990.github.io/tags/%E9%BB%84%E4%BB%81%E5%AE%87/"},{"name":"人物传记","slug":"人物传记","permalink":"https://blackforest1990.github.io/tags/%E4%BA%BA%E7%89%A9%E4%BC%A0%E8%AE%B0/"}]}